// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2014.1
// Copyright (C) 2014 Xilinx Inc. All rights reserved.
// 
// ==============================================================

`timescale 1ns/1ps
module memory_scanner_AXILiteS_s_axi
#(parameter
    C_ADDR_WIDTH = 8,
    C_DATA_WIDTH = 32
)(
    // axi4 lite slave signals
    input  wire                      ACLK,
    input  wire                      ARESETN,
    input  wire [C_ADDR_WIDTH-1:0]   AWADDR,
    input  wire                      AWVALID,
    output wire                      AWREADY,
    input  wire [C_DATA_WIDTH-1:0]   WDATA,
    input  wire [C_DATA_WIDTH/8-1:0] WSTRB,
    input  wire                      WVALID,
    output wire                      WREADY,
    output wire [1:0]                BRESP,
    output wire                      BVALID,
    input  wire                      BREADY,
    input  wire [C_ADDR_WIDTH-1:0]   ARADDR,
    input  wire                      ARVALID,
    output wire                      ARREADY,
    output wire [C_DATA_WIDTH-1:0]   RDATA,
    output wire [1:0]                RRESP,
    output wire                      RVALID,
    input  wire                      RREADY,
    output wire                      interrupt,
    // user signals
    output wire                      ap_start,
    input  wire                      ap_done,
    input  wire                      ap_ready,
    input  wire                      ap_idle,
    input  wire [0:0]                ap_return,
    output wire [7:0]                search_string_0,
    output wire                      search_string_0_ap_vld,
    input  wire                      search_string_0_ap_ack,
    output wire [7:0]                search_string_1,
    output wire                      search_string_1_ap_vld,
    input  wire                      search_string_1_ap_ack,
    output wire [7:0]                search_string_2,
    output wire                      search_string_2_ap_vld,
    input  wire                      search_string_2_ap_ack,
    output wire [7:0]                search_string_3,
    output wire                      search_string_3_ap_vld,
    input  wire                      search_string_3_ap_ack,
    output wire [7:0]                search_string_4,
    output wire                      search_string_4_ap_vld,
    input  wire                      search_string_4_ap_ack,
    output wire [7:0]                search_string_5,
    output wire                      search_string_5_ap_vld,
    input  wire                      search_string_5_ap_ack,
    output wire [7:0]                search_string_6,
    output wire                      search_string_6_ap_vld,
    input  wire                      search_string_6_ap_ack,
    output wire [7:0]                search_string_7,
    output wire                      search_string_7_ap_vld,
    input  wire                      search_string_7_ap_ack,
    output wire [7:0]                search_string_8,
    output wire                      search_string_8_ap_vld,
    input  wire                      search_string_8_ap_ack,
    output wire [7:0]                search_string_9,
    output wire                      search_string_9_ap_vld,
    input  wire                      search_string_9_ap_ack,
    output wire [7:0]                search_string_10,
    output wire                      search_string_10_ap_vld,
    input  wire                      search_string_10_ap_ack,
    output wire [7:0]                search_string_11,
    output wire                      search_string_11_ap_vld,
    input  wire                      search_string_11_ap_ack,
    output wire [7:0]                search_string_12,
    output wire                      search_string_12_ap_vld,
    input  wire                      search_string_12_ap_ack,
    output wire [7:0]                search_string_13,
    output wire                      search_string_13_ap_vld,
    input  wire                      search_string_13_ap_ack,
    output wire [7:0]                search_string_14,
    output wire                      search_string_14_ap_vld,
    input  wire                      search_string_14_ap_ack,
    output wire [7:0]                search_string_15,
    output wire                      search_string_15_ap_vld,
    input  wire                      search_string_15_ap_ack,
    output wire [7:0]                search_string_16,
    output wire                      search_string_16_ap_vld,
    input  wire                      search_string_16_ap_ack,
    input  wire [31:0]               count_out,
    input  wire                      count_out_ap_vld
);
//------------------------Address Info-------------------
// 0x00 : Control signals
//        bit 0  - ap_start (Read/Write/COH)
//        bit 1  - ap_done (Read/COR)
//        bit 2  - ap_idle (Read)
//        bit 3  - ap_ready (Read)
//        bit 7  - auto_restart (Read/Write)
//        others - reserved
// 0x04 : Global Interrupt Enable Register
//        bit 0  - Global Interrupt Enable (Read/Write)
//        others - reserved
// 0x08 : IP Interrupt Enable Register (Read/Write)
//        bit 0  - Channel 0 (ap_done)
//        bit 1  - Channel 1 (ap_ready)
//        others - reserved
// 0x0c : IP Interrupt Status Register (Read/TOW)
//        bit 0  - Channel 0 (ap_done)
//        bit 1  - Channel 1 (ap_ready)
//        others - reserved
// 0x10 : Data signal of ap_return
//        bit 0  - ap_return[0] (Read)
//        others - reserved
// 0x18 : Data signal of search_string_0
//        bit 7~0 - search_string_0[7:0] (Read/Write)
//        others  - reserved
// 0x1c : Control signal of search_string_0
//        bit 0  - search_string_0_ap_vld (Read/Write/COH)
//        bit 1  - search_string_0_ap_ack (Read)
//        others - reserved
// 0x20 : Data signal of search_string_1
//        bit 7~0 - search_string_1[7:0] (Read/Write)
//        others  - reserved
// 0x24 : Control signal of search_string_1
//        bit 0  - search_string_1_ap_vld (Read/Write/COH)
//        bit 1  - search_string_1_ap_ack (Read)
//        others - reserved
// 0x28 : Data signal of search_string_2
//        bit 7~0 - search_string_2[7:0] (Read/Write)
//        others  - reserved
// 0x2c : Control signal of search_string_2
//        bit 0  - search_string_2_ap_vld (Read/Write/COH)
//        bit 1  - search_string_2_ap_ack (Read)
//        others - reserved
// 0x30 : Data signal of search_string_3
//        bit 7~0 - search_string_3[7:0] (Read/Write)
//        others  - reserved
// 0x34 : Control signal of search_string_3
//        bit 0  - search_string_3_ap_vld (Read/Write/COH)
//        bit 1  - search_string_3_ap_ack (Read)
//        others - reserved
// 0x38 : Data signal of search_string_4
//        bit 7~0 - search_string_4[7:0] (Read/Write)
//        others  - reserved
// 0x3c : Control signal of search_string_4
//        bit 0  - search_string_4_ap_vld (Read/Write/COH)
//        bit 1  - search_string_4_ap_ack (Read)
//        others - reserved
// 0x40 : Data signal of search_string_5
//        bit 7~0 - search_string_5[7:0] (Read/Write)
//        others  - reserved
// 0x44 : Control signal of search_string_5
//        bit 0  - search_string_5_ap_vld (Read/Write/COH)
//        bit 1  - search_string_5_ap_ack (Read)
//        others - reserved
// 0x48 : Data signal of search_string_6
//        bit 7~0 - search_string_6[7:0] (Read/Write)
//        others  - reserved
// 0x4c : Control signal of search_string_6
//        bit 0  - search_string_6_ap_vld (Read/Write/COH)
//        bit 1  - search_string_6_ap_ack (Read)
//        others - reserved
// 0x50 : Data signal of search_string_7
//        bit 7~0 - search_string_7[7:0] (Read/Write)
//        others  - reserved
// 0x54 : Control signal of search_string_7
//        bit 0  - search_string_7_ap_vld (Read/Write/COH)
//        bit 1  - search_string_7_ap_ack (Read)
//        others - reserved
// 0x58 : Data signal of search_string_8
//        bit 7~0 - search_string_8[7:0] (Read/Write)
//        others  - reserved
// 0x5c : Control signal of search_string_8
//        bit 0  - search_string_8_ap_vld (Read/Write/COH)
//        bit 1  - search_string_8_ap_ack (Read)
//        others - reserved
// 0x60 : Data signal of search_string_9
//        bit 7~0 - search_string_9[7:0] (Read/Write)
//        others  - reserved
// 0x64 : Control signal of search_string_9
//        bit 0  - search_string_9_ap_vld (Read/Write/COH)
//        bit 1  - search_string_9_ap_ack (Read)
//        others - reserved
// 0x68 : Data signal of search_string_10
//        bit 7~0 - search_string_10[7:0] (Read/Write)
//        others  - reserved
// 0x6c : Control signal of search_string_10
//        bit 0  - search_string_10_ap_vld (Read/Write/COH)
//        bit 1  - search_string_10_ap_ack (Read)
//        others - reserved
// 0x70 : Data signal of search_string_11
//        bit 7~0 - search_string_11[7:0] (Read/Write)
//        others  - reserved
// 0x74 : Control signal of search_string_11
//        bit 0  - search_string_11_ap_vld (Read/Write/COH)
//        bit 1  - search_string_11_ap_ack (Read)
//        others - reserved
// 0x78 : Data signal of search_string_12
//        bit 7~0 - search_string_12[7:0] (Read/Write)
//        others  - reserved
// 0x7c : Control signal of search_string_12
//        bit 0  - search_string_12_ap_vld (Read/Write/COH)
//        bit 1  - search_string_12_ap_ack (Read)
//        others - reserved
// 0x80 : Data signal of search_string_13
//        bit 7~0 - search_string_13[7:0] (Read/Write)
//        others  - reserved
// 0x84 : Control signal of search_string_13
//        bit 0  - search_string_13_ap_vld (Read/Write/COH)
//        bit 1  - search_string_13_ap_ack (Read)
//        others - reserved
// 0x88 : Data signal of search_string_14
//        bit 7~0 - search_string_14[7:0] (Read/Write)
//        others  - reserved
// 0x8c : Control signal of search_string_14
//        bit 0  - search_string_14_ap_vld (Read/Write/COH)
//        bit 1  - search_string_14_ap_ack (Read)
//        others - reserved
// 0x90 : Data signal of search_string_15
//        bit 7~0 - search_string_15[7:0] (Read/Write)
//        others  - reserved
// 0x94 : Control signal of search_string_15
//        bit 0  - search_string_15_ap_vld (Read/Write/COH)
//        bit 1  - search_string_15_ap_ack (Read)
//        others - reserved
// 0x98 : Data signal of search_string_16
//        bit 7~0 - search_string_16[7:0] (Read/Write)
//        others  - reserved
// 0x9c : Control signal of search_string_16
//        bit 0  - search_string_16_ap_vld (Read/Write/COH)
//        bit 1  - search_string_16_ap_ack (Read)
//        others - reserved
// 0xa0 : Data signal of count_out
//        bit 31~0 - count_out[31:0] (Read)
// 0xa4 : Control signal of count_out
//        bit 0  - count_out_ap_vld (Read/COR)
//        others - reserved
// (SC = Self Clear, COR = Clear on Read, TOW = Toggle on Write, COH = Clear on Handshake)

//------------------------Parameter----------------------
// address bits
localparam
    ADDR_BITS = 8;

// address
localparam
    ADDR_AP_CTRL                 = 8'h00,
    ADDR_GIE                     = 8'h04,
    ADDR_IER                     = 8'h08,
    ADDR_ISR                     = 8'h0c,
    ADDR_AP_RETURN_0             = 8'h10,
    ADDR_SEARCH_STRING_0_DATA_0  = 8'h18,
    ADDR_SEARCH_STRING_0_CTRL    = 8'h1c,
    ADDR_SEARCH_STRING_1_DATA_0  = 8'h20,
    ADDR_SEARCH_STRING_1_CTRL    = 8'h24,
    ADDR_SEARCH_STRING_2_DATA_0  = 8'h28,
    ADDR_SEARCH_STRING_2_CTRL    = 8'h2c,
    ADDR_SEARCH_STRING_3_DATA_0  = 8'h30,
    ADDR_SEARCH_STRING_3_CTRL    = 8'h34,
    ADDR_SEARCH_STRING_4_DATA_0  = 8'h38,
    ADDR_SEARCH_STRING_4_CTRL    = 8'h3c,
    ADDR_SEARCH_STRING_5_DATA_0  = 8'h40,
    ADDR_SEARCH_STRING_5_CTRL    = 8'h44,
    ADDR_SEARCH_STRING_6_DATA_0  = 8'h48,
    ADDR_SEARCH_STRING_6_CTRL    = 8'h4c,
    ADDR_SEARCH_STRING_7_DATA_0  = 8'h50,
    ADDR_SEARCH_STRING_7_CTRL    = 8'h54,
    ADDR_SEARCH_STRING_8_DATA_0  = 8'h58,
    ADDR_SEARCH_STRING_8_CTRL    = 8'h5c,
    ADDR_SEARCH_STRING_9_DATA_0  = 8'h60,
    ADDR_SEARCH_STRING_9_CTRL    = 8'h64,
    ADDR_SEARCH_STRING_10_DATA_0 = 8'h68,
    ADDR_SEARCH_STRING_10_CTRL   = 8'h6c,
    ADDR_SEARCH_STRING_11_DATA_0 = 8'h70,
    ADDR_SEARCH_STRING_11_CTRL   = 8'h74,
    ADDR_SEARCH_STRING_12_DATA_0 = 8'h78,
    ADDR_SEARCH_STRING_12_CTRL   = 8'h7c,
    ADDR_SEARCH_STRING_13_DATA_0 = 8'h80,
    ADDR_SEARCH_STRING_13_CTRL   = 8'h84,
    ADDR_SEARCH_STRING_14_DATA_0 = 8'h88,
    ADDR_SEARCH_STRING_14_CTRL   = 8'h8c,
    ADDR_SEARCH_STRING_15_DATA_0 = 8'h90,
    ADDR_SEARCH_STRING_15_CTRL   = 8'h94,
    ADDR_SEARCH_STRING_16_DATA_0 = 8'h98,
    ADDR_SEARCH_STRING_16_CTRL   = 8'h9c,
    ADDR_COUNT_OUT_DATA_0        = 8'ha0,
    ADDR_COUNT_OUT_CTRL          = 8'ha4;

// axi write fsm
localparam
    WRIDLE = 2'd0,
    WRDATA = 2'd1,
    WRRESP = 2'd2;

// axi read fsm
localparam
    RDIDLE = 2'd0,
    RDDATA = 2'd1;

//------------------------Local signal-------------------
// axi write
reg  [1:0]           wstate;
reg  [1:0]           wnext;
reg  [ADDR_BITS-1:0] waddr;
wire [31:0]          wmask;
wire                 aw_hs;
wire                 w_hs;
// axi read
reg  [1:0]           rstate;
reg  [1:0]           rnext;
reg  [31:0]          rdata;
wire                 ar_hs;
wire [ADDR_BITS-1:0] raddr;
// internal registers
wire                 int_ap_idle;
wire                 int_ap_ready;
reg                  int_ap_done;
reg                  int_ap_start;
reg                  int_auto_restart;
reg                  int_gie;
reg  [1:0]           int_ier;
reg  [1:0]           int_isr;
wire [0:0]           int_ap_return;
reg  [7:0]           int_search_string_0;
reg                  int_search_string_0_ap_vld;
wire                 int_search_string_0_ap_ack;
reg  [7:0]           int_search_string_1;
reg                  int_search_string_1_ap_vld;
wire                 int_search_string_1_ap_ack;
reg  [7:0]           int_search_string_2;
reg                  int_search_string_2_ap_vld;
wire                 int_search_string_2_ap_ack;
reg  [7:0]           int_search_string_3;
reg                  int_search_string_3_ap_vld;
wire                 int_search_string_3_ap_ack;
reg  [7:0]           int_search_string_4;
reg                  int_search_string_4_ap_vld;
wire                 int_search_string_4_ap_ack;
reg  [7:0]           int_search_string_5;
reg                  int_search_string_5_ap_vld;
wire                 int_search_string_5_ap_ack;
reg  [7:0]           int_search_string_6;
reg                  int_search_string_6_ap_vld;
wire                 int_search_string_6_ap_ack;
reg  [7:0]           int_search_string_7;
reg                  int_search_string_7_ap_vld;
wire                 int_search_string_7_ap_ack;
reg  [7:0]           int_search_string_8;
reg                  int_search_string_8_ap_vld;
wire                 int_search_string_8_ap_ack;
reg  [7:0]           int_search_string_9;
reg                  int_search_string_9_ap_vld;
wire                 int_search_string_9_ap_ack;
reg  [7:0]           int_search_string_10;
reg                  int_search_string_10_ap_vld;
wire                 int_search_string_10_ap_ack;
reg  [7:0]           int_search_string_11;
reg                  int_search_string_11_ap_vld;
wire                 int_search_string_11_ap_ack;
reg  [7:0]           int_search_string_12;
reg                  int_search_string_12_ap_vld;
wire                 int_search_string_12_ap_ack;
reg  [7:0]           int_search_string_13;
reg                  int_search_string_13_ap_vld;
wire                 int_search_string_13_ap_ack;
reg  [7:0]           int_search_string_14;
reg                  int_search_string_14_ap_vld;
wire                 int_search_string_14_ap_ack;
reg  [7:0]           int_search_string_15;
reg                  int_search_string_15_ap_vld;
wire                 int_search_string_15_ap_ack;
reg  [7:0]           int_search_string_16;
reg                  int_search_string_16_ap_vld;
wire                 int_search_string_16_ap_ack;
wire [31:0]          int_count_out;
reg                  int_count_out_ap_vld;

//------------------------Body---------------------------
//++++++++++++++++++++++++axi write++++++++++++++++++++++
assign AWREADY = (wstate == WRIDLE);
assign WREADY  = (wstate == WRDATA);
assign BRESP   = 2'b00;  // OKAY
assign BVALID  = (wstate == WRRESP);
assign wmask   = { {8{WSTRB[3]}}, {8{WSTRB[2]}}, {8{WSTRB[1]}}, {8{WSTRB[0]}} };
assign aw_hs   = AWVALID & AWREADY;
assign w_hs    = WVALID & WREADY;

// wstate
always @(posedge ACLK) begin
    if (~ARESETN)
        wstate <= WRIDLE;
    else
        wstate <= wnext;
end

// wnext
always @(*) begin
    case (wstate)
        WRIDLE:
            if (AWVALID)
                wnext = WRDATA;
            else
                wnext = WRIDLE;
        WRDATA:
            if (WVALID)
                wnext = WRRESP;
            else
                wnext = WRDATA;
        WRRESP:
            if (BREADY)
                wnext = WRIDLE;
            else
                wnext = WRRESP;
        default:
            wnext = WRIDLE;
    endcase
end

// waddr
always @(posedge ACLK) begin
    if (aw_hs)
        waddr <= AWADDR[ADDR_BITS-1:0];
end
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++

//++++++++++++++++++++++++axi read+++++++++++++++++++++++
assign ARREADY = (rstate == RDIDLE);
assign RDATA   = rdata;
assign RRESP   = 2'b00;  // OKAY
assign RVALID  = (rstate == RDDATA);
assign ar_hs   = ARVALID & ARREADY;
assign raddr   = ARADDR[ADDR_BITS-1:0];

// rstate
always @(posedge ACLK) begin
    if (~ARESETN)
        rstate <= RDIDLE;
    else
        rstate <= rnext;
end

// rnext
always @(*) begin
    case (rstate)
        RDIDLE:
            if (ARVALID)
                rnext = RDDATA;
            else
                rnext = RDIDLE;
        RDDATA:
            if (RREADY & RVALID)
                rnext = RDIDLE;
            else
                rnext = RDDATA;
        default:
            rnext = RDIDLE;
    endcase
end

// rdata
always @(posedge ACLK) begin
    if (ar_hs) begin
        rdata <= 1'b0;
        case (raddr)
            ADDR_AP_CTRL: begin
                rdata[0] <= int_ap_start;
                rdata[1] <= int_ap_done;
                rdata[2] <= int_ap_idle;
                rdata[3] <= int_ap_ready;
                rdata[7] <= int_auto_restart;
            end
            ADDR_GIE: begin
                rdata <= int_gie;
            end
            ADDR_IER: begin
                rdata <= int_ier;
            end
            ADDR_ISR: begin
                rdata <= int_isr;
            end
            ADDR_AP_RETURN_0: begin
                rdata <= int_ap_return[0:0];
            end
            ADDR_SEARCH_STRING_0_DATA_0: begin
                rdata <= int_search_string_0[7:0];
            end
            ADDR_SEARCH_STRING_0_CTRL: begin
                rdata[0] <= int_search_string_0_ap_vld;
                rdata[1] <= ~int_search_string_0_ap_vld;
            end
            ADDR_SEARCH_STRING_1_DATA_0: begin
                rdata <= int_search_string_1[7:0];
            end
            ADDR_SEARCH_STRING_1_CTRL: begin
                rdata[0] <= int_search_string_1_ap_vld;
                rdata[1] <= ~int_search_string_1_ap_vld;
            end
            ADDR_SEARCH_STRING_2_DATA_0: begin
                rdata <= int_search_string_2[7:0];
            end
            ADDR_SEARCH_STRING_2_CTRL: begin
                rdata[0] <= int_search_string_2_ap_vld;
                rdata[1] <= ~int_search_string_2_ap_vld;
            end
            ADDR_SEARCH_STRING_3_DATA_0: begin
                rdata <= int_search_string_3[7:0];
            end
            ADDR_SEARCH_STRING_3_CTRL: begin
                rdata[0] <= int_search_string_3_ap_vld;
                rdata[1] <= ~int_search_string_3_ap_vld;
            end
            ADDR_SEARCH_STRING_4_DATA_0: begin
                rdata <= int_search_string_4[7:0];
            end
            ADDR_SEARCH_STRING_4_CTRL: begin
                rdata[0] <= int_search_string_4_ap_vld;
                rdata[1] <= ~int_search_string_4_ap_vld;
            end
            ADDR_SEARCH_STRING_5_DATA_0: begin
                rdata <= int_search_string_5[7:0];
            end
            ADDR_SEARCH_STRING_5_CTRL: begin
                rdata[0] <= int_search_string_5_ap_vld;
                rdata[1] <= ~int_search_string_5_ap_vld;
            end
            ADDR_SEARCH_STRING_6_DATA_0: begin
                rdata <= int_search_string_6[7:0];
            end
            ADDR_SEARCH_STRING_6_CTRL: begin
                rdata[0] <= int_search_string_6_ap_vld;
                rdata[1] <= ~int_search_string_6_ap_vld;
            end
            ADDR_SEARCH_STRING_7_DATA_0: begin
                rdata <= int_search_string_7[7:0];
            end
            ADDR_SEARCH_STRING_7_CTRL: begin
                rdata[0] <= int_search_string_7_ap_vld;
                rdata[1] <= ~int_search_string_7_ap_vld;
            end
            ADDR_SEARCH_STRING_8_DATA_0: begin
                rdata <= int_search_string_8[7:0];
            end
            ADDR_SEARCH_STRING_8_CTRL: begin
                rdata[0] <= int_search_string_8_ap_vld;
                rdata[1] <= ~int_search_string_8_ap_vld;
            end
            ADDR_SEARCH_STRING_9_DATA_0: begin
                rdata <= int_search_string_9[7:0];
            end
            ADDR_SEARCH_STRING_9_CTRL: begin
                rdata[0] <= int_search_string_9_ap_vld;
                rdata[1] <= ~int_search_string_9_ap_vld;
            end
            ADDR_SEARCH_STRING_10_DATA_0: begin
                rdata <= int_search_string_10[7:0];
            end
            ADDR_SEARCH_STRING_10_CTRL: begin
                rdata[0] <= int_search_string_10_ap_vld;
                rdata[1] <= ~int_search_string_10_ap_vld;
            end
            ADDR_SEARCH_STRING_11_DATA_0: begin
                rdata <= int_search_string_11[7:0];
            end
            ADDR_SEARCH_STRING_11_CTRL: begin
                rdata[0] <= int_search_string_11_ap_vld;
                rdata[1] <= ~int_search_string_11_ap_vld;
            end
            ADDR_SEARCH_STRING_12_DATA_0: begin
                rdata <= int_search_string_12[7:0];
            end
            ADDR_SEARCH_STRING_12_CTRL: begin
                rdata[0] <= int_search_string_12_ap_vld;
                rdata[1] <= ~int_search_string_12_ap_vld;
            end
            ADDR_SEARCH_STRING_13_DATA_0: begin
                rdata <= int_search_string_13[7:0];
            end
            ADDR_SEARCH_STRING_13_CTRL: begin
                rdata[0] <= int_search_string_13_ap_vld;
                rdata[1] <= ~int_search_string_13_ap_vld;
            end
            ADDR_SEARCH_STRING_14_DATA_0: begin
                rdata <= int_search_string_14[7:0];
            end
            ADDR_SEARCH_STRING_14_CTRL: begin
                rdata[0] <= int_search_string_14_ap_vld;
                rdata[1] <= ~int_search_string_14_ap_vld;
            end
            ADDR_SEARCH_STRING_15_DATA_0: begin
                rdata <= int_search_string_15[7:0];
            end
            ADDR_SEARCH_STRING_15_CTRL: begin
                rdata[0] <= int_search_string_15_ap_vld;
                rdata[1] <= ~int_search_string_15_ap_vld;
            end
            ADDR_SEARCH_STRING_16_DATA_0: begin
                rdata <= int_search_string_16[7:0];
            end
            ADDR_SEARCH_STRING_16_CTRL: begin
                rdata[0] <= int_search_string_16_ap_vld;
                rdata[1] <= ~int_search_string_16_ap_vld;
            end
            ADDR_COUNT_OUT_DATA_0: begin
                rdata <= int_count_out[31:0];
            end
            ADDR_COUNT_OUT_CTRL: begin
                rdata[0] <= int_count_out_ap_vld;
            end
        endcase
    end
end
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++

//++++++++++++++++++++++++internal registers+++++++++++++
assign interrupt                   = int_gie & (|int_isr);
assign ap_start                    = int_ap_start;
assign int_ap_idle                 = ap_idle;
assign int_ap_ready                = ap_ready;
assign int_ap_return               = ap_return;
assign search_string_0             = int_search_string_0;
assign search_string_0_ap_vld      = int_search_string_0_ap_vld;
assign int_search_string_0_ap_ack  = search_string_0_ap_ack;
assign search_string_1             = int_search_string_1;
assign search_string_1_ap_vld      = int_search_string_1_ap_vld;
assign int_search_string_1_ap_ack  = search_string_1_ap_ack;
assign search_string_2             = int_search_string_2;
assign search_string_2_ap_vld      = int_search_string_2_ap_vld;
assign int_search_string_2_ap_ack  = search_string_2_ap_ack;
assign search_string_3             = int_search_string_3;
assign search_string_3_ap_vld      = int_search_string_3_ap_vld;
assign int_search_string_3_ap_ack  = search_string_3_ap_ack;
assign search_string_4             = int_search_string_4;
assign search_string_4_ap_vld      = int_search_string_4_ap_vld;
assign int_search_string_4_ap_ack  = search_string_4_ap_ack;
assign search_string_5             = int_search_string_5;
assign search_string_5_ap_vld      = int_search_string_5_ap_vld;
assign int_search_string_5_ap_ack  = search_string_5_ap_ack;
assign search_string_6             = int_search_string_6;
assign search_string_6_ap_vld      = int_search_string_6_ap_vld;
assign int_search_string_6_ap_ack  = search_string_6_ap_ack;
assign search_string_7             = int_search_string_7;
assign search_string_7_ap_vld      = int_search_string_7_ap_vld;
assign int_search_string_7_ap_ack  = search_string_7_ap_ack;
assign search_string_8             = int_search_string_8;
assign search_string_8_ap_vld      = int_search_string_8_ap_vld;
assign int_search_string_8_ap_ack  = search_string_8_ap_ack;
assign search_string_9             = int_search_string_9;
assign search_string_9_ap_vld      = int_search_string_9_ap_vld;
assign int_search_string_9_ap_ack  = search_string_9_ap_ack;
assign search_string_10            = int_search_string_10;
assign search_string_10_ap_vld     = int_search_string_10_ap_vld;
assign int_search_string_10_ap_ack = search_string_10_ap_ack;
assign search_string_11            = int_search_string_11;
assign search_string_11_ap_vld     = int_search_string_11_ap_vld;
assign int_search_string_11_ap_ack = search_string_11_ap_ack;
assign search_string_12            = int_search_string_12;
assign search_string_12_ap_vld     = int_search_string_12_ap_vld;
assign int_search_string_12_ap_ack = search_string_12_ap_ack;
assign search_string_13            = int_search_string_13;
assign search_string_13_ap_vld     = int_search_string_13_ap_vld;
assign int_search_string_13_ap_ack = search_string_13_ap_ack;
assign search_string_14            = int_search_string_14;
assign search_string_14_ap_vld     = int_search_string_14_ap_vld;
assign int_search_string_14_ap_ack = search_string_14_ap_ack;
assign search_string_15            = int_search_string_15;
assign search_string_15_ap_vld     = int_search_string_15_ap_vld;
assign int_search_string_15_ap_ack = search_string_15_ap_ack;
assign search_string_16            = int_search_string_16;
assign search_string_16_ap_vld     = int_search_string_16_ap_vld;
assign int_search_string_16_ap_ack = search_string_16_ap_ack;
assign int_count_out               = count_out;

// int_ap_start
always @(posedge ACLK) begin
    if (~ARESETN)
        int_ap_start <= 1'b0;
    else if (w_hs && waddr == ADDR_AP_CTRL && WSTRB[0] && WDATA[0])
        int_ap_start <= 1'b1;
    else if (int_ap_ready)
        int_ap_start <= int_auto_restart; // clear on handshake/auto restart
end

// int_ap_done
always @(posedge ACLK) begin
    if (~ARESETN)
        int_ap_done <= 1'b0;
    else if (ap_done)
        int_ap_done <= 1'b1;
    else if (ar_hs && raddr == ADDR_AP_CTRL)
        int_ap_done <= 1'b0; // clear on read
end

// int_auto_restart
always @(posedge ACLK) begin
    if (~ARESETN)
        int_auto_restart <= 1'b0;
    else if (w_hs && waddr == ADDR_AP_CTRL && WSTRB[0])
        int_auto_restart <=  WDATA[7];
end

// int_gie
always @(posedge ACLK) begin
    if (~ARESETN)
        int_gie <= 1'b0;
    else if (w_hs && waddr == ADDR_GIE && WSTRB[0])
        int_gie <= WDATA[0];
end

// int_ier
always @(posedge ACLK) begin
    if (~ARESETN)
        int_ier <= 1'b0;
    else if (w_hs && waddr == ADDR_IER && WSTRB[0])
        int_ier <= WDATA[1:0];
end

// int_isr[0]
always @(posedge ACLK) begin
    if (~ARESETN)
        int_isr[0] <= 1'b0;
    else if (int_ier[0] & ap_done)
        int_isr[0] <= 1'b1;
    else if (w_hs && waddr == ADDR_ISR && WSTRB[0])
        int_isr[0] <= int_isr[0] ^ WDATA[0]; // toggle on write
end

// int_isr[1]
always @(posedge ACLK) begin
    if (~ARESETN)
        int_isr[1] <= 1'b0;
    else if (int_ier[1] & ap_ready)
        int_isr[1] <= 1'b1;
    else if (w_hs && waddr == ADDR_ISR && WSTRB[0])
        int_isr[1] <= int_isr[1] ^ WDATA[1]; // toggle on write
end

// int_search_string_0[7:0]
always @(posedge ACLK) begin
    if (w_hs && waddr == ADDR_SEARCH_STRING_0_DATA_0)
        int_search_string_0[7:0] <= (WDATA[31:0] & wmask) | (int_search_string_0[7:0] & ~wmask);
end

// int_search_string_0_ap_vld
always @(posedge ACLK) begin
    if (~ARESETN)
        int_search_string_0_ap_vld <= 1'b0;
    else if (w_hs && waddr == ADDR_SEARCH_STRING_0_CTRL && WSTRB[0] && WDATA[0])
        int_search_string_0_ap_vld <= 1'b1;
    else if (search_string_0_ap_ack)
        int_search_string_0_ap_vld <= 1'b0; // clear on handshake
end

// int_search_string_1[7:0]
always @(posedge ACLK) begin
    if (w_hs && waddr == ADDR_SEARCH_STRING_1_DATA_0)
        int_search_string_1[7:0] <= (WDATA[31:0] & wmask) | (int_search_string_1[7:0] & ~wmask);
end

// int_search_string_1_ap_vld
always @(posedge ACLK) begin
    if (~ARESETN)
        int_search_string_1_ap_vld <= 1'b0;
    else if (w_hs && waddr == ADDR_SEARCH_STRING_1_CTRL && WSTRB[0] && WDATA[0])
        int_search_string_1_ap_vld <= 1'b1;
    else if (search_string_1_ap_ack)
        int_search_string_1_ap_vld <= 1'b0; // clear on handshake
end

// int_search_string_2[7:0]
always @(posedge ACLK) begin
    if (w_hs && waddr == ADDR_SEARCH_STRING_2_DATA_0)
        int_search_string_2[7:0] <= (WDATA[31:0] & wmask) | (int_search_string_2[7:0] & ~wmask);
end

// int_search_string_2_ap_vld
always @(posedge ACLK) begin
    if (~ARESETN)
        int_search_string_2_ap_vld <= 1'b0;
    else if (w_hs && waddr == ADDR_SEARCH_STRING_2_CTRL && WSTRB[0] && WDATA[0])
        int_search_string_2_ap_vld <= 1'b1;
    else if (search_string_2_ap_ack)
        int_search_string_2_ap_vld <= 1'b0; // clear on handshake
end

// int_search_string_3[7:0]
always @(posedge ACLK) begin
    if (w_hs && waddr == ADDR_SEARCH_STRING_3_DATA_0)
        int_search_string_3[7:0] <= (WDATA[31:0] & wmask) | (int_search_string_3[7:0] & ~wmask);
end

// int_search_string_3_ap_vld
always @(posedge ACLK) begin
    if (~ARESETN)
        int_search_string_3_ap_vld <= 1'b0;
    else if (w_hs && waddr == ADDR_SEARCH_STRING_3_CTRL && WSTRB[0] && WDATA[0])
        int_search_string_3_ap_vld <= 1'b1;
    else if (search_string_3_ap_ack)
        int_search_string_3_ap_vld <= 1'b0; // clear on handshake
end

// int_search_string_4[7:0]
always @(posedge ACLK) begin
    if (w_hs && waddr == ADDR_SEARCH_STRING_4_DATA_0)
        int_search_string_4[7:0] <= (WDATA[31:0] & wmask) | (int_search_string_4[7:0] & ~wmask);
end

// int_search_string_4_ap_vld
always @(posedge ACLK) begin
    if (~ARESETN)
        int_search_string_4_ap_vld <= 1'b0;
    else if (w_hs && waddr == ADDR_SEARCH_STRING_4_CTRL && WSTRB[0] && WDATA[0])
        int_search_string_4_ap_vld <= 1'b1;
    else if (search_string_4_ap_ack)
        int_search_string_4_ap_vld <= 1'b0; // clear on handshake
end

// int_search_string_5[7:0]
always @(posedge ACLK) begin
    if (w_hs && waddr == ADDR_SEARCH_STRING_5_DATA_0)
        int_search_string_5[7:0] <= (WDATA[31:0] & wmask) | (int_search_string_5[7:0] & ~wmask);
end

// int_search_string_5_ap_vld
always @(posedge ACLK) begin
    if (~ARESETN)
        int_search_string_5_ap_vld <= 1'b0;
    else if (w_hs && waddr == ADDR_SEARCH_STRING_5_CTRL && WSTRB[0] && WDATA[0])
        int_search_string_5_ap_vld <= 1'b1;
    else if (search_string_5_ap_ack)
        int_search_string_5_ap_vld <= 1'b0; // clear on handshake
end

// int_search_string_6[7:0]
always @(posedge ACLK) begin
    if (w_hs && waddr == ADDR_SEARCH_STRING_6_DATA_0)
        int_search_string_6[7:0] <= (WDATA[31:0] & wmask) | (int_search_string_6[7:0] & ~wmask);
end

// int_search_string_6_ap_vld
always @(posedge ACLK) begin
    if (~ARESETN)
        int_search_string_6_ap_vld <= 1'b0;
    else if (w_hs && waddr == ADDR_SEARCH_STRING_6_CTRL && WSTRB[0] && WDATA[0])
        int_search_string_6_ap_vld <= 1'b1;
    else if (search_string_6_ap_ack)
        int_search_string_6_ap_vld <= 1'b0; // clear on handshake
end

// int_search_string_7[7:0]
always @(posedge ACLK) begin
    if (w_hs && waddr == ADDR_SEARCH_STRING_7_DATA_0)
        int_search_string_7[7:0] <= (WDATA[31:0] & wmask) | (int_search_string_7[7:0] & ~wmask);
end

// int_search_string_7_ap_vld
always @(posedge ACLK) begin
    if (~ARESETN)
        int_search_string_7_ap_vld <= 1'b0;
    else if (w_hs && waddr == ADDR_SEARCH_STRING_7_CTRL && WSTRB[0] && WDATA[0])
        int_search_string_7_ap_vld <= 1'b1;
    else if (search_string_7_ap_ack)
        int_search_string_7_ap_vld <= 1'b0; // clear on handshake
end

// int_search_string_8[7:0]
always @(posedge ACLK) begin
    if (w_hs && waddr == ADDR_SEARCH_STRING_8_DATA_0)
        int_search_string_8[7:0] <= (WDATA[31:0] & wmask) | (int_search_string_8[7:0] & ~wmask);
end

// int_search_string_8_ap_vld
always @(posedge ACLK) begin
    if (~ARESETN)
        int_search_string_8_ap_vld <= 1'b0;
    else if (w_hs && waddr == ADDR_SEARCH_STRING_8_CTRL && WSTRB[0] && WDATA[0])
        int_search_string_8_ap_vld <= 1'b1;
    else if (search_string_8_ap_ack)
        int_search_string_8_ap_vld <= 1'b0; // clear on handshake
end

// int_search_string_9[7:0]
always @(posedge ACLK) begin
    if (w_hs && waddr == ADDR_SEARCH_STRING_9_DATA_0)
        int_search_string_9[7:0] <= (WDATA[31:0] & wmask) | (int_search_string_9[7:0] & ~wmask);
end

// int_search_string_9_ap_vld
always @(posedge ACLK) begin
    if (~ARESETN)
        int_search_string_9_ap_vld <= 1'b0;
    else if (w_hs && waddr == ADDR_SEARCH_STRING_9_CTRL && WSTRB[0] && WDATA[0])
        int_search_string_9_ap_vld <= 1'b1;
    else if (search_string_9_ap_ack)
        int_search_string_9_ap_vld <= 1'b0; // clear on handshake
end

// int_search_string_10[7:0]
always @(posedge ACLK) begin
    if (w_hs && waddr == ADDR_SEARCH_STRING_10_DATA_0)
        int_search_string_10[7:0] <= (WDATA[31:0] & wmask) | (int_search_string_10[7:0] & ~wmask);
end

// int_search_string_10_ap_vld
always @(posedge ACLK) begin
    if (~ARESETN)
        int_search_string_10_ap_vld <= 1'b0;
    else if (w_hs && waddr == ADDR_SEARCH_STRING_10_CTRL && WSTRB[0] && WDATA[0])
        int_search_string_10_ap_vld <= 1'b1;
    else if (search_string_10_ap_ack)
        int_search_string_10_ap_vld <= 1'b0; // clear on handshake
end

// int_search_string_11[7:0]
always @(posedge ACLK) begin
    if (w_hs && waddr == ADDR_SEARCH_STRING_11_DATA_0)
        int_search_string_11[7:0] <= (WDATA[31:0] & wmask) | (int_search_string_11[7:0] & ~wmask);
end

// int_search_string_11_ap_vld
always @(posedge ACLK) begin
    if (~ARESETN)
        int_search_string_11_ap_vld <= 1'b0;
    else if (w_hs && waddr == ADDR_SEARCH_STRING_11_CTRL && WSTRB[0] && WDATA[0])
        int_search_string_11_ap_vld <= 1'b1;
    else if (search_string_11_ap_ack)
        int_search_string_11_ap_vld <= 1'b0; // clear on handshake
end

// int_search_string_12[7:0]
always @(posedge ACLK) begin
    if (w_hs && waddr == ADDR_SEARCH_STRING_12_DATA_0)
        int_search_string_12[7:0] <= (WDATA[31:0] & wmask) | (int_search_string_12[7:0] & ~wmask);
end

// int_search_string_12_ap_vld
always @(posedge ACLK) begin
    if (~ARESETN)
        int_search_string_12_ap_vld <= 1'b0;
    else if (w_hs && waddr == ADDR_SEARCH_STRING_12_CTRL && WSTRB[0] && WDATA[0])
        int_search_string_12_ap_vld <= 1'b1;
    else if (search_string_12_ap_ack)
        int_search_string_12_ap_vld <= 1'b0; // clear on handshake
end

// int_search_string_13[7:0]
always @(posedge ACLK) begin
    if (w_hs && waddr == ADDR_SEARCH_STRING_13_DATA_0)
        int_search_string_13[7:0] <= (WDATA[31:0] & wmask) | (int_search_string_13[7:0] & ~wmask);
end

// int_search_string_13_ap_vld
always @(posedge ACLK) begin
    if (~ARESETN)
        int_search_string_13_ap_vld <= 1'b0;
    else if (w_hs && waddr == ADDR_SEARCH_STRING_13_CTRL && WSTRB[0] && WDATA[0])
        int_search_string_13_ap_vld <= 1'b1;
    else if (search_string_13_ap_ack)
        int_search_string_13_ap_vld <= 1'b0; // clear on handshake
end

// int_search_string_14[7:0]
always @(posedge ACLK) begin
    if (w_hs && waddr == ADDR_SEARCH_STRING_14_DATA_0)
        int_search_string_14[7:0] <= (WDATA[31:0] & wmask) | (int_search_string_14[7:0] & ~wmask);
end

// int_search_string_14_ap_vld
always @(posedge ACLK) begin
    if (~ARESETN)
        int_search_string_14_ap_vld <= 1'b0;
    else if (w_hs && waddr == ADDR_SEARCH_STRING_14_CTRL && WSTRB[0] && WDATA[0])
        int_search_string_14_ap_vld <= 1'b1;
    else if (search_string_14_ap_ack)
        int_search_string_14_ap_vld <= 1'b0; // clear on handshake
end

// int_search_string_15[7:0]
always @(posedge ACLK) begin
    if (w_hs && waddr == ADDR_SEARCH_STRING_15_DATA_0)
        int_search_string_15[7:0] <= (WDATA[31:0] & wmask) | (int_search_string_15[7:0] & ~wmask);
end

// int_search_string_15_ap_vld
always @(posedge ACLK) begin
    if (~ARESETN)
        int_search_string_15_ap_vld <= 1'b0;
    else if (w_hs && waddr == ADDR_SEARCH_STRING_15_CTRL && WSTRB[0] && WDATA[0])
        int_search_string_15_ap_vld <= 1'b1;
    else if (search_string_15_ap_ack)
        int_search_string_15_ap_vld <= 1'b0; // clear on handshake
end

// int_search_string_16[7:0]
always @(posedge ACLK) begin
    if (w_hs && waddr == ADDR_SEARCH_STRING_16_DATA_0)
        int_search_string_16[7:0] <= (WDATA[31:0] & wmask) | (int_search_string_16[7:0] & ~wmask);
end

// int_search_string_16_ap_vld
always @(posedge ACLK) begin
    if (~ARESETN)
        int_search_string_16_ap_vld <= 1'b0;
    else if (w_hs && waddr == ADDR_SEARCH_STRING_16_CTRL && WSTRB[0] && WDATA[0])
        int_search_string_16_ap_vld <= 1'b1;
    else if (search_string_16_ap_ack)
        int_search_string_16_ap_vld <= 1'b0; // clear on handshake
end

// int_count_out_ap_vld
always @(posedge ACLK) begin
    if (~ARESETN)
        int_count_out_ap_vld <= 1'b0;
    else if (count_out_ap_vld)
        int_count_out_ap_vld <= 1'b1;
    else if (ar_hs && raddr == ADDR_COUNT_OUT_CTRL)
        int_count_out_ap_vld <= 1'b0; // clear on read
end

//+++++++++++++++++++++++++++++++++++++++++++++++++++++++

endmodule
