// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2014.1
// Copyright (C) 2014 Xilinx Inc. All rights reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="memory_scanner,hls_ip_2014_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.750000,HLS_SYN_LAT=3221225473,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=0,HLS_SYN_LUT=0}" *)

module memory_scanner (
        s_axi_AXILiteS_AWVALID,
        s_axi_AXILiteS_AWREADY,
        s_axi_AXILiteS_AWADDR,
        s_axi_AXILiteS_WVALID,
        s_axi_AXILiteS_WREADY,
        s_axi_AXILiteS_WDATA,
        s_axi_AXILiteS_WSTRB,
        s_axi_AXILiteS_ARVALID,
        s_axi_AXILiteS_ARREADY,
        s_axi_AXILiteS_ARADDR,
        s_axi_AXILiteS_RVALID,
        s_axi_AXILiteS_RREADY,
        s_axi_AXILiteS_RDATA,
        s_axi_AXILiteS_RRESP,
        s_axi_AXILiteS_BVALID,
        s_axi_AXILiteS_BREADY,
        s_axi_AXILiteS_BRESP,
        ap_clk,
        ap_rst_n,
        m_axi_ddr_AWVALID,
        m_axi_ddr_AWREADY,
        m_axi_ddr_AWADDR,
        m_axi_ddr_AWID,
        m_axi_ddr_AWLEN,
        m_axi_ddr_AWSIZE,
        m_axi_ddr_AWBURST,
        m_axi_ddr_AWLOCK,
        m_axi_ddr_AWCACHE,
        m_axi_ddr_AWPROT,
        m_axi_ddr_AWQOS,
        m_axi_ddr_AWREGION,
        m_axi_ddr_AWUSER,
        m_axi_ddr_WVALID,
        m_axi_ddr_WREADY,
        m_axi_ddr_WDATA,
        m_axi_ddr_WSTRB,
        m_axi_ddr_WLAST,
        m_axi_ddr_WID,
        m_axi_ddr_WUSER,
        m_axi_ddr_ARVALID,
        m_axi_ddr_ARREADY,
        m_axi_ddr_ARADDR,
        m_axi_ddr_ARID,
        m_axi_ddr_ARLEN,
        m_axi_ddr_ARSIZE,
        m_axi_ddr_ARBURST,
        m_axi_ddr_ARLOCK,
        m_axi_ddr_ARCACHE,
        m_axi_ddr_ARPROT,
        m_axi_ddr_ARQOS,
        m_axi_ddr_ARREGION,
        m_axi_ddr_ARUSER,
        m_axi_ddr_RVALID,
        m_axi_ddr_RREADY,
        m_axi_ddr_RDATA,
        m_axi_ddr_RLAST,
        m_axi_ddr_RID,
        m_axi_ddr_RUSER,
        m_axi_ddr_RRESP,
        m_axi_ddr_BVALID,
        m_axi_ddr_BREADY,
        m_axi_ddr_BRESP,
        m_axi_ddr_BID,
        m_axi_ddr_BUSER,
        interrupt
);

parameter    ap_const_logic_1 = 1'b1;
parameter    ap_const_logic_0 = 1'b0;
parameter    ap_ST_st1_fsm_0 = 2'b00;
parameter    ap_ST_st2_fsm_1 = 2'b1;
parameter    ap_ST_st3_fsm_2 = 2'b10;
parameter    ap_ST_st4_fsm_3 = 2'b11;
parameter    C_S_AXI_AXILITES_DATA_WIDTH = 32;
parameter    ap_const_int64_8 = 8;
parameter    C_S_AXI_AXILITES_ADDR_WIDTH = 8;
parameter    C_DATA_WIDTH = 32;
parameter    C_M_AXI_DDR_ID_WIDTH = 1;
parameter    C_M_AXI_DDR_ADDR_WIDTH = 32;
parameter    C_M_AXI_DDR_DATA_WIDTH = 32;
parameter    C_M_AXI_DDR_AWUSER_WIDTH = 1;
parameter    C_M_AXI_DDR_ARUSER_WIDTH = 1;
parameter    C_M_AXI_DDR_WUSER_WIDTH = 1;
parameter    C_M_AXI_DDR_RUSER_WIDTH = 1;
parameter    C_M_AXI_DDR_BUSER_WIDTH = 1;
parameter    C_M_AXI_DDR_TARGET_ADDR = 0;
parameter    C_M_AXI_DDR_USER_VALUE = 0;
parameter    C_M_AXI_DDR_PROT_VALUE = 0;
parameter    C_M_AXI_DDR_CACHE_VALUE = 3;
parameter    ap_const_lv1_0 = 1'b0;
parameter    ap_const_lv5_F = 5'b1111;
parameter    ap_const_lv5_E = 5'b1110;
parameter    ap_const_lv5_D = 5'b1101;
parameter    ap_const_lv5_C = 5'b1100;
parameter    ap_const_lv5_B = 5'b1011;
parameter    ap_const_lv5_A = 5'b1010;
parameter    ap_const_lv5_9 = 5'b1001;
parameter    ap_const_lv5_8 = 5'b1000;
parameter    ap_const_lv5_7 = 5'b111;
parameter    ap_const_lv5_6 = 5'b110;
parameter    ap_const_lv5_5 = 5'b101;
parameter    ap_const_lv5_4 = 5'b100;
parameter    ap_const_lv5_3 = 5'b11;
parameter    ap_const_lv5_2 = 5'b10;
parameter    ap_const_lv5_1 = 5'b1;
parameter    ap_const_lv5_0 = 5'b00000;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv31_0 = 31'b0000000000000000000000000000000;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv3_0 = 3'b000;
parameter    ap_const_lv2_0 = 2'b00;
parameter    ap_const_lv4_0 = 4'b0000;
parameter    ap_const_lv31_40000000 = 31'b1000000000000000000000000000000;
parameter    ap_const_lv31_1 = 31'b1;
parameter    ap_const_lv32_4 = 32'b100;
parameter    ap_const_lv32_1F = 32'b11111;
parameter    ap_const_lv28_0 = 28'b0000000000000000000000000000;
parameter    ap_const_lv1_1 = 1'b1;
parameter    ap_const_lv8_0 = 8'b00000000;
parameter    ap_true = 1'b1;
parameter    C_S_AXI_AXILITES_WSTRB_WIDTH = (C_S_AXI_AXILITES_DATA_WIDTH / ap_const_int64_8);
parameter    C_WSTRB_WIDTH = (C_DATA_WIDTH / ap_const_int64_8);
parameter    C_M_AXI_DDR_WSTRB_WIDTH = (C_M_AXI_DDR_DATA_WIDTH / ap_const_int64_8);

input   s_axi_AXILiteS_AWVALID;
output   s_axi_AXILiteS_AWREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1 : 0] s_axi_AXILiteS_AWADDR;
input   s_axi_AXILiteS_WVALID;
output   s_axi_AXILiteS_WREADY;
input  [C_S_AXI_AXILITES_DATA_WIDTH - 1 : 0] s_axi_AXILiteS_WDATA;
input  [C_S_AXI_AXILITES_WSTRB_WIDTH - 1 : 0] s_axi_AXILiteS_WSTRB;
input   s_axi_AXILiteS_ARVALID;
output   s_axi_AXILiteS_ARREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1 : 0] s_axi_AXILiteS_ARADDR;
output   s_axi_AXILiteS_RVALID;
input   s_axi_AXILiteS_RREADY;
output  [C_S_AXI_AXILITES_DATA_WIDTH - 1 : 0] s_axi_AXILiteS_RDATA;
output  [1:0] s_axi_AXILiteS_RRESP;
output   s_axi_AXILiteS_BVALID;
input   s_axi_AXILiteS_BREADY;
output  [1:0] s_axi_AXILiteS_BRESP;
input   ap_clk;
input   ap_rst_n;
output   m_axi_ddr_AWVALID;
input   m_axi_ddr_AWREADY;
output  [C_M_AXI_DDR_ADDR_WIDTH - 1 : 0] m_axi_ddr_AWADDR;
output  [C_M_AXI_DDR_ID_WIDTH - 1 : 0] m_axi_ddr_AWID;
output  [7:0] m_axi_ddr_AWLEN;
output  [2:0] m_axi_ddr_AWSIZE;
output  [1:0] m_axi_ddr_AWBURST;
output  [1:0] m_axi_ddr_AWLOCK;
output  [3:0] m_axi_ddr_AWCACHE;
output  [2:0] m_axi_ddr_AWPROT;
output  [3:0] m_axi_ddr_AWQOS;
output  [3:0] m_axi_ddr_AWREGION;
output  [C_M_AXI_DDR_AWUSER_WIDTH - 1 : 0] m_axi_ddr_AWUSER;
output   m_axi_ddr_WVALID;
input   m_axi_ddr_WREADY;
output  [C_M_AXI_DDR_DATA_WIDTH - 1 : 0] m_axi_ddr_WDATA;
output  [C_M_AXI_DDR_WSTRB_WIDTH - 1 : 0] m_axi_ddr_WSTRB;
output   m_axi_ddr_WLAST;
output  [C_M_AXI_DDR_ID_WIDTH - 1 : 0] m_axi_ddr_WID;
output  [C_M_AXI_DDR_WUSER_WIDTH - 1 : 0] m_axi_ddr_WUSER;
output   m_axi_ddr_ARVALID;
input   m_axi_ddr_ARREADY;
output  [C_M_AXI_DDR_ADDR_WIDTH - 1 : 0] m_axi_ddr_ARADDR;
output  [C_M_AXI_DDR_ID_WIDTH - 1 : 0] m_axi_ddr_ARID;
output  [7:0] m_axi_ddr_ARLEN;
output  [2:0] m_axi_ddr_ARSIZE;
output  [1:0] m_axi_ddr_ARBURST;
output  [1:0] m_axi_ddr_ARLOCK;
output  [3:0] m_axi_ddr_ARCACHE;
output  [2:0] m_axi_ddr_ARPROT;
output  [3:0] m_axi_ddr_ARQOS;
output  [3:0] m_axi_ddr_ARREGION;
output  [C_M_AXI_DDR_ARUSER_WIDTH - 1 : 0] m_axi_ddr_ARUSER;
input   m_axi_ddr_RVALID;
output   m_axi_ddr_RREADY;
input  [C_M_AXI_DDR_DATA_WIDTH - 1 : 0] m_axi_ddr_RDATA;
input   m_axi_ddr_RLAST;
input  [C_M_AXI_DDR_ID_WIDTH - 1 : 0] m_axi_ddr_RID;
input  [C_M_AXI_DDR_RUSER_WIDTH - 1 : 0] m_axi_ddr_RUSER;
input  [1:0] m_axi_ddr_RRESP;
input   m_axi_ddr_BVALID;
output   m_axi_ddr_BREADY;
input  [1:0] m_axi_ddr_BRESP;
input  [C_M_AXI_DDR_ID_WIDTH - 1 : 0] m_axi_ddr_BID;
input  [C_M_AXI_DDR_BUSER_WIDTH - 1 : 0] m_axi_ddr_BUSER;
output   interrupt;

wire    ap_start;
reg    ap_done;
reg    ap_idle;
reg   [1:0] ap_CS_fsm = 2'b00;
reg    ap_ready;
wire   [7:0] search_string_0;
wire    search_string_0_ap_vld;
reg    search_string_0_ap_ack;
wire   [7:0] search_string_1;
wire    search_string_1_ap_vld;
reg    search_string_1_ap_ack;
wire   [7:0] search_string_2;
wire    search_string_2_ap_vld;
reg    search_string_2_ap_ack;
wire   [7:0] search_string_3;
wire    search_string_3_ap_vld;
reg    search_string_3_ap_ack;
wire   [7:0] search_string_4;
wire    search_string_4_ap_vld;
reg    search_string_4_ap_ack;
wire   [7:0] search_string_5;
wire    search_string_5_ap_vld;
reg    search_string_5_ap_ack;
wire   [7:0] search_string_6;
wire    search_string_6_ap_vld;
reg    search_string_6_ap_ack;
wire   [7:0] search_string_7;
wire    search_string_7_ap_vld;
reg    search_string_7_ap_ack;
wire   [7:0] search_string_8;
wire    search_string_8_ap_vld;
reg    search_string_8_ap_ack;
wire   [7:0] search_string_9;
wire    search_string_9_ap_vld;
reg    search_string_9_ap_ack;
wire   [7:0] search_string_10;
wire    search_string_10_ap_vld;
reg    search_string_10_ap_ack;
wire   [7:0] search_string_11;
wire    search_string_11_ap_vld;
reg    search_string_11_ap_ack;
wire   [7:0] search_string_12;
wire    search_string_12_ap_vld;
reg    search_string_12_ap_ack;
wire   [7:0] search_string_13;
wire    search_string_13_ap_vld;
reg    search_string_13_ap_ack;
wire   [7:0] search_string_14;
wire    search_string_14_ap_vld;
reg    search_string_14_ap_ack;
wire   [7:0] search_string_15;
wire    search_string_15_ap_vld;
reg    search_string_15_ap_ack;
wire   [7:0] search_string_16;
wire    search_string_16_ap_vld;
reg    search_string_16_ap_ack;
wire   [31:0] count_out;
reg    count_out_ap_vld;
wire   [0:0] ap_return;
wire    ddr_AWVALID;
wire    ddr_AWREADY;
wire   [31:0] ddr_AWADDR;
wire   [0:0] ddr_AWID;
wire   [31:0] ddr_AWLEN;
wire   [2:0] ddr_AWSIZE;
wire   [1:0] ddr_AWBURST;
wire   [1:0] ddr_AWLOCK;
wire   [3:0] ddr_AWCACHE;
wire   [2:0] ddr_AWPROT;
wire   [3:0] ddr_AWQOS;
wire   [3:0] ddr_AWREGION;
wire   [0:0] ddr_AWUSER;
wire    ddr_WVALID;
wire    ddr_WREADY;
wire   [7:0] ddr_WDATA;
wire   [0:0] ddr_WSTRB;
wire    ddr_WLAST;
wire   [0:0] ddr_WID;
wire   [0:0] ddr_WUSER;
reg    ddr_ARVALID;
wire    ddr_ARREADY;
wire   [31:0] ddr_ARADDR;
wire   [0:0] ddr_ARID;
wire   [31:0] ddr_ARLEN;
wire   [2:0] ddr_ARSIZE;
wire   [1:0] ddr_ARBURST;
wire   [1:0] ddr_ARLOCK;
wire   [3:0] ddr_ARCACHE;
wire   [2:0] ddr_ARPROT;
wire   [3:0] ddr_ARQOS;
wire   [3:0] ddr_ARREGION;
wire   [0:0] ddr_ARUSER;
wire    ddr_RVALID;
reg    ddr_RREADY;
wire   [7:0] ddr_RDATA;
wire    ddr_RLAST;
wire   [0:0] ddr_RID;
wire   [0:0] ddr_RUSER;
wire   [1:0] ddr_RRESP;
wire    ddr_BVALID;
wire    ddr_BREADY;
wire   [1:0] ddr_BRESP;
wire   [0:0] ddr_BID;
wire   [0:0] ddr_BUSER;
wire   [30:0] tmp_8_fu_345_p2;
reg   [30:0] tmp_8_reg_434;
wire   [0:0] exitcond1_fu_339_p2;
reg    ap_sig_ioackin_ddr_ARREADY;
reg   [7:0] ddr_addr_read_reg_445;
wire   [4:0] tmp_2_fu_362_p1;
reg    ap_sig_bdd_366;
wire   [31:0] count_0_1_fu_407_p3;
wire   [31:0] search_index_0_1_fu_415_p3;
wire   [31:0] count_0_2_fu_423_p3;
reg   [31:0] count_reg_251;
reg   [31:0] search_index_reg_263;
reg   [31:0] tmp_reg_275;
reg   [30:0] j_reg_288;
reg   [7:0] search_string_load_phi_reg_299;
wire   [63:0] tmp_1_fu_351_p1;
reg    ap_reg_ioackin_ddr_ARREADY = 1'b0;
wire   [0:0] tmp_3_fu_366_p2;
wire   [31:0] tmp_4_fu_371_p2;
wire   [31:0] search_index_0_fu_377_p3;
wire   [27:0] tmp_5_fu_385_p4;
wire   [0:0] icmp_fu_395_p2;
wire   [31:0] count_0_fu_401_p2;
reg   [1:0] ap_NS_fsm;
reg    ap_sig_bdd_444;
reg    ap_sig_bdd_369;


memory_scanner_AXILiteS_s_axi #(
    .C_ADDR_WIDTH( C_S_AXI_AXILITES_ADDR_WIDTH ),
    .C_DATA_WIDTH( C_S_AXI_AXILITES_DATA_WIDTH ))
memory_scanner_AXILiteS_s_axi_U(
    .AWVALID( s_axi_AXILiteS_AWVALID ),
    .AWREADY( s_axi_AXILiteS_AWREADY ),
    .AWADDR( s_axi_AXILiteS_AWADDR ),
    .WVALID( s_axi_AXILiteS_WVALID ),
    .WREADY( s_axi_AXILiteS_WREADY ),
    .WDATA( s_axi_AXILiteS_WDATA ),
    .WSTRB( s_axi_AXILiteS_WSTRB ),
    .ARVALID( s_axi_AXILiteS_ARVALID ),
    .ARREADY( s_axi_AXILiteS_ARREADY ),
    .ARADDR( s_axi_AXILiteS_ARADDR ),
    .RVALID( s_axi_AXILiteS_RVALID ),
    .RREADY( s_axi_AXILiteS_RREADY ),
    .RDATA( s_axi_AXILiteS_RDATA ),
    .RRESP( s_axi_AXILiteS_RRESP ),
    .BVALID( s_axi_AXILiteS_BVALID ),
    .BREADY( s_axi_AXILiteS_BREADY ),
    .BRESP( s_axi_AXILiteS_BRESP ),
    .ACLK( ap_clk ),
    .ARESETN( ap_rst_n ),
    .ap_start( ap_start ),
    .interrupt( interrupt ),
    .ap_ready( ap_ready ),
    .ap_done( ap_done ),
    .ap_idle( ap_idle ),
    .ap_return( ap_return ),
    .search_string_0( search_string_0 ),
    .search_string_0_ap_vld( search_string_0_ap_vld ),
    .search_string_0_ap_ack( search_string_0_ap_ack ),
    .search_string_1( search_string_1 ),
    .search_string_1_ap_vld( search_string_1_ap_vld ),
    .search_string_1_ap_ack( search_string_1_ap_ack ),
    .search_string_2( search_string_2 ),
    .search_string_2_ap_vld( search_string_2_ap_vld ),
    .search_string_2_ap_ack( search_string_2_ap_ack ),
    .search_string_3( search_string_3 ),
    .search_string_3_ap_vld( search_string_3_ap_vld ),
    .search_string_3_ap_ack( search_string_3_ap_ack ),
    .search_string_4( search_string_4 ),
    .search_string_4_ap_vld( search_string_4_ap_vld ),
    .search_string_4_ap_ack( search_string_4_ap_ack ),
    .search_string_5( search_string_5 ),
    .search_string_5_ap_vld( search_string_5_ap_vld ),
    .search_string_5_ap_ack( search_string_5_ap_ack ),
    .search_string_6( search_string_6 ),
    .search_string_6_ap_vld( search_string_6_ap_vld ),
    .search_string_6_ap_ack( search_string_6_ap_ack ),
    .search_string_7( search_string_7 ),
    .search_string_7_ap_vld( search_string_7_ap_vld ),
    .search_string_7_ap_ack( search_string_7_ap_ack ),
    .search_string_8( search_string_8 ),
    .search_string_8_ap_vld( search_string_8_ap_vld ),
    .search_string_8_ap_ack( search_string_8_ap_ack ),
    .search_string_9( search_string_9 ),
    .search_string_9_ap_vld( search_string_9_ap_vld ),
    .search_string_9_ap_ack( search_string_9_ap_ack ),
    .search_string_10( search_string_10 ),
    .search_string_10_ap_vld( search_string_10_ap_vld ),
    .search_string_10_ap_ack( search_string_10_ap_ack ),
    .search_string_11( search_string_11 ),
    .search_string_11_ap_vld( search_string_11_ap_vld ),
    .search_string_11_ap_ack( search_string_11_ap_ack ),
    .search_string_12( search_string_12 ),
    .search_string_12_ap_vld( search_string_12_ap_vld ),
    .search_string_12_ap_ack( search_string_12_ap_ack ),
    .search_string_13( search_string_13 ),
    .search_string_13_ap_vld( search_string_13_ap_vld ),
    .search_string_13_ap_ack( search_string_13_ap_ack ),
    .search_string_14( search_string_14 ),
    .search_string_14_ap_vld( search_string_14_ap_vld ),
    .search_string_14_ap_ack( search_string_14_ap_ack ),
    .search_string_15( search_string_15 ),
    .search_string_15_ap_vld( search_string_15_ap_vld ),
    .search_string_15_ap_ack( search_string_15_ap_ack ),
    .search_string_16( search_string_16 ),
    .search_string_16_ap_vld( search_string_16_ap_vld ),
    .search_string_16_ap_ack( search_string_16_ap_ack ),
    .count_out( count_out ),
    .count_out_ap_vld( count_out_ap_vld )
);

memory_scanner_ddr_m_axi #(
    .USER_DW( 8 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 2 ),
    .C_ID_WIDTH( C_M_AXI_DDR_ID_WIDTH ),
    .C_ADDR_WIDTH( C_M_AXI_DDR_ADDR_WIDTH ),
    .C_DATA_WIDTH( C_M_AXI_DDR_DATA_WIDTH ),
    .C_AWUSER_WIDTH( C_M_AXI_DDR_AWUSER_WIDTH ),
    .C_ARUSER_WIDTH( C_M_AXI_DDR_ARUSER_WIDTH ),
    .C_WUSER_WIDTH( C_M_AXI_DDR_WUSER_WIDTH ),
    .C_RUSER_WIDTH( C_M_AXI_DDR_RUSER_WIDTH ),
    .C_BUSER_WIDTH( C_M_AXI_DDR_BUSER_WIDTH ),
    .C_TARGET_ADDR( C_M_AXI_DDR_TARGET_ADDR ),
    .C_USER_VALUE( C_M_AXI_DDR_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_DDR_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_DDR_CACHE_VALUE ))
memory_scanner_ddr_m_axi_U(
    .AWVALID( m_axi_ddr_AWVALID ),
    .AWREADY( m_axi_ddr_AWREADY ),
    .AWADDR( m_axi_ddr_AWADDR ),
    .AWID( m_axi_ddr_AWID ),
    .AWLEN( m_axi_ddr_AWLEN ),
    .AWSIZE( m_axi_ddr_AWSIZE ),
    .AWBURST( m_axi_ddr_AWBURST ),
    .AWLOCK( m_axi_ddr_AWLOCK ),
    .AWCACHE( m_axi_ddr_AWCACHE ),
    .AWPROT( m_axi_ddr_AWPROT ),
    .AWQOS( m_axi_ddr_AWQOS ),
    .AWREGION( m_axi_ddr_AWREGION ),
    .AWUSER( m_axi_ddr_AWUSER ),
    .WVALID( m_axi_ddr_WVALID ),
    .WREADY( m_axi_ddr_WREADY ),
    .WDATA( m_axi_ddr_WDATA ),
    .WSTRB( m_axi_ddr_WSTRB ),
    .WLAST( m_axi_ddr_WLAST ),
    .WID( m_axi_ddr_WID ),
    .WUSER( m_axi_ddr_WUSER ),
    .ARVALID( m_axi_ddr_ARVALID ),
    .ARREADY( m_axi_ddr_ARREADY ),
    .ARADDR( m_axi_ddr_ARADDR ),
    .ARID( m_axi_ddr_ARID ),
    .ARLEN( m_axi_ddr_ARLEN ),
    .ARSIZE( m_axi_ddr_ARSIZE ),
    .ARBURST( m_axi_ddr_ARBURST ),
    .ARLOCK( m_axi_ddr_ARLOCK ),
    .ARCACHE( m_axi_ddr_ARCACHE ),
    .ARPROT( m_axi_ddr_ARPROT ),
    .ARQOS( m_axi_ddr_ARQOS ),
    .ARREGION( m_axi_ddr_ARREGION ),
    .ARUSER( m_axi_ddr_ARUSER ),
    .RVALID( m_axi_ddr_RVALID ),
    .RREADY( m_axi_ddr_RREADY ),
    .RDATA( m_axi_ddr_RDATA ),
    .RLAST( m_axi_ddr_RLAST ),
    .RID( m_axi_ddr_RID ),
    .RUSER( m_axi_ddr_RUSER ),
    .RRESP( m_axi_ddr_RRESP ),
    .BVALID( m_axi_ddr_BVALID ),
    .BREADY( m_axi_ddr_BREADY ),
    .BRESP( m_axi_ddr_BRESP ),
    .BID( m_axi_ddr_BID ),
    .BUSER( m_axi_ddr_BUSER ),
    .ACLK( ap_clk ),
    .ARESETN( ap_rst_n ),
    .I_ARVALID( ddr_ARVALID ),
    .I_ARREADY( ddr_ARREADY ),
    .I_ARADDR( ddr_ARADDR ),
    .I_ARID( ddr_ARID ),
    .I_ARLEN( ddr_ARLEN ),
    .I_ARSIZE( ddr_ARSIZE ),
    .I_ARLOCK( ddr_ARLOCK ),
    .I_ARCACHE( ddr_ARCACHE ),
    .I_ARQOS( ddr_ARQOS ),
    .I_ARPROT( ddr_ARPROT ),
    .I_ARUSER( ddr_ARUSER ),
    .I_ARBURST( ddr_ARBURST ),
    .I_ARREGION( ddr_ARREGION ),
    .I_RVALID( ddr_RVALID ),
    .I_RREADY( ddr_RREADY ),
    .I_RDATA( ddr_RDATA ),
    .I_RID( ddr_RID ),
    .I_RUSER( ddr_RUSER ),
    .I_RRESP( ddr_RRESP ),
    .I_RLAST( ddr_RLAST ),
    .I_AWVALID( ddr_AWVALID ),
    .I_AWREADY( ddr_AWREADY ),
    .I_AWADDR( ddr_AWADDR ),
    .I_AWID( ddr_AWID ),
    .I_AWLEN( ddr_AWLEN ),
    .I_AWSIZE( ddr_AWSIZE ),
    .I_AWLOCK( ddr_AWLOCK ),
    .I_AWCACHE( ddr_AWCACHE ),
    .I_AWQOS( ddr_AWQOS ),
    .I_AWPROT( ddr_AWPROT ),
    .I_AWUSER( ddr_AWUSER ),
    .I_AWBURST( ddr_AWBURST ),
    .I_AWREGION( ddr_AWREGION ),
    .I_WVALID( ddr_WVALID ),
    .I_WREADY( ddr_WREADY ),
    .I_WDATA( ddr_WDATA ),
    .I_WID( ddr_WID ),
    .I_WUSER( ddr_WUSER ),
    .I_WLAST( ddr_WLAST ),
    .I_WSTRB( ddr_WSTRB ),
    .I_BVALID( ddr_BVALID ),
    .I_BREADY( ddr_BREADY ),
    .I_BRESP( ddr_BRESP ),
    .I_BID( ddr_BID ),
    .I_BUSER( ddr_BUSER )
);



/// the current state (ap_CS_fsm) of the state machine. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_CS_fsm
    if (ap_rst_n == 1'b0) begin
        ap_CS_fsm <= ap_ST_st1_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

/// ap_reg_ioackin_ddr_ARREADY assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ioackin_ddr_ARREADY
    if (ap_rst_n == 1'b0) begin
        ap_reg_ioackin_ddr_ARREADY <= ap_const_logic_0;
    end else begin
        if (ap_sig_bdd_444) begin
            if (~((exitcond1_fu_339_p2 == ap_const_lv1_0) & (ap_const_logic_0 == ap_sig_ioackin_ddr_ARREADY))) begin
                ap_reg_ioackin_ddr_ARREADY <= ap_const_logic_0;
            end else if ((ap_const_logic_1 == ddr_ARREADY)) begin
                ap_reg_ioackin_ddr_ARREADY <= ap_const_logic_1;
            end
        end
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_ST_st4_fsm_3 == ap_CS_fsm)) begin
        count_reg_251 <= count_0_1_fu_407_p3;
    end else if (((ap_ST_st1_fsm_0 == ap_CS_fsm) & ~(ap_start == ap_const_logic_0))) begin
        count_reg_251 <= ap_const_lv32_0;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_ST_st4_fsm_3 == ap_CS_fsm)) begin
        j_reg_288 <= tmp_8_reg_434;
    end else if (((ap_ST_st1_fsm_0 == ap_CS_fsm) & ~(ap_start == ap_const_logic_0))) begin
        j_reg_288 <= ap_const_lv31_0;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_ST_st4_fsm_3 == ap_CS_fsm)) begin
        search_index_reg_263 <= search_index_0_1_fu_415_p3;
    end else if (((ap_ST_st1_fsm_0 == ap_CS_fsm) & ~(ap_start == ap_const_logic_0))) begin
        search_index_reg_263 <= ap_const_lv32_0;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (ap_sig_bdd_369) begin
        if ((tmp_2_fu_362_p1 == ap_const_lv5_F)) begin
            search_string_load_phi_reg_299 <= search_string_15;
        end else if ((tmp_2_fu_362_p1 == ap_const_lv5_E)) begin
            search_string_load_phi_reg_299 <= search_string_14;
        end else if ((tmp_2_fu_362_p1 == ap_const_lv5_D)) begin
            search_string_load_phi_reg_299 <= search_string_13;
        end else if ((tmp_2_fu_362_p1 == ap_const_lv5_C)) begin
            search_string_load_phi_reg_299 <= search_string_12;
        end else if ((tmp_2_fu_362_p1 == ap_const_lv5_B)) begin
            search_string_load_phi_reg_299 <= search_string_11;
        end else if ((tmp_2_fu_362_p1 == ap_const_lv5_A)) begin
            search_string_load_phi_reg_299 <= search_string_10;
        end else if ((tmp_2_fu_362_p1 == ap_const_lv5_9)) begin
            search_string_load_phi_reg_299 <= search_string_9;
        end else if ((tmp_2_fu_362_p1 == ap_const_lv5_8)) begin
            search_string_load_phi_reg_299 <= search_string_8;
        end else if ((tmp_2_fu_362_p1 == ap_const_lv5_7)) begin
            search_string_load_phi_reg_299 <= search_string_7;
        end else if ((tmp_2_fu_362_p1 == ap_const_lv5_6)) begin
            search_string_load_phi_reg_299 <= search_string_6;
        end else if ((tmp_2_fu_362_p1 == ap_const_lv5_5)) begin
            search_string_load_phi_reg_299 <= search_string_5;
        end else if ((tmp_2_fu_362_p1 == ap_const_lv5_4)) begin
            search_string_load_phi_reg_299 <= search_string_4;
        end else if ((tmp_2_fu_362_p1 == ap_const_lv5_3)) begin
            search_string_load_phi_reg_299 <= search_string_3;
        end else if ((tmp_2_fu_362_p1 == ap_const_lv5_2)) begin
            search_string_load_phi_reg_299 <= search_string_2;
        end else if ((tmp_2_fu_362_p1 == ap_const_lv5_1)) begin
            search_string_load_phi_reg_299 <= search_string_1;
        end else if ((tmp_2_fu_362_p1 == ap_const_lv5_0)) begin
            search_string_load_phi_reg_299 <= search_string_0;
        end else if ((ap_true == ap_true)) begin
            search_string_load_phi_reg_299 <= search_string_16;
        end
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_ST_st4_fsm_3 == ap_CS_fsm)) begin
        tmp_reg_275 <= count_0_2_fu_423_p3;
    end else if (((ap_ST_st1_fsm_0 == ap_CS_fsm) & ~(ap_start == ap_const_logic_0))) begin
        tmp_reg_275 <= ap_const_lv32_0;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_ST_st3_fsm_2 == ap_CS_fsm) & ~ap_sig_bdd_366)) begin
        ddr_addr_read_reg_445 <= ddr_RDATA;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_ST_st2_fsm_1 == ap_CS_fsm) & ~((exitcond1_fu_339_p2 == ap_const_lv1_0) & (ap_const_logic_0 == ap_sig_ioackin_ddr_ARREADY)))) begin
        tmp_8_reg_434 <= tmp_8_fu_345_p2;
    end
end

/// ap_done assign process. ///
always @ (ap_CS_fsm or exitcond1_fu_339_p2 or ap_sig_ioackin_ddr_ARREADY)
begin
    if (((ap_ST_st2_fsm_1 == ap_CS_fsm) & ~((exitcond1_fu_339_p2 == ap_const_lv1_0) & (ap_const_logic_0 == ap_sig_ioackin_ddr_ARREADY)) & ~(exitcond1_fu_339_p2 == ap_const_lv1_0))) begin
        ap_done = ap_const_logic_1;
    end else begin
        ap_done = ap_const_logic_0;
    end
end

/// ap_idle assign process. ///
always @ (ap_start or ap_CS_fsm)
begin
    if ((~(ap_const_logic_1 == ap_start) & (ap_ST_st1_fsm_0 == ap_CS_fsm))) begin
        ap_idle = ap_const_logic_1;
    end else begin
        ap_idle = ap_const_logic_0;
    end
end

/// ap_ready assign process. ///
always @ (ap_CS_fsm or exitcond1_fu_339_p2 or ap_sig_ioackin_ddr_ARREADY)
begin
    if (((ap_ST_st2_fsm_1 == ap_CS_fsm) & ~((exitcond1_fu_339_p2 == ap_const_lv1_0) & (ap_const_logic_0 == ap_sig_ioackin_ddr_ARREADY)) & ~(exitcond1_fu_339_p2 == ap_const_lv1_0))) begin
        ap_ready = ap_const_logic_1;
    end else begin
        ap_ready = ap_const_logic_0;
    end
end

/// ap_sig_ioackin_ddr_ARREADY assign process. ///
always @ (ddr_ARREADY or ap_reg_ioackin_ddr_ARREADY)
begin
    if ((ap_const_logic_0 == ap_reg_ioackin_ddr_ARREADY)) begin
        ap_sig_ioackin_ddr_ARREADY = ddr_ARREADY;
    end else begin
        ap_sig_ioackin_ddr_ARREADY = ap_const_logic_1;
    end
end

/// count_out_ap_vld assign process. ///
always @ (ap_CS_fsm or exitcond1_fu_339_p2)
begin
    if (((ap_ST_st2_fsm_1 == ap_CS_fsm) & ~(exitcond1_fu_339_p2 == ap_const_lv1_0))) begin
        count_out_ap_vld = ap_const_logic_1;
    end else begin
        count_out_ap_vld = ap_const_logic_0;
    end
end

/// ddr_ARVALID assign process. ///
always @ (ap_CS_fsm or exitcond1_fu_339_p2 or ap_reg_ioackin_ddr_ARREADY)
begin
    if (((ap_ST_st2_fsm_1 == ap_CS_fsm) & (exitcond1_fu_339_p2 == ap_const_lv1_0) & (ap_const_logic_0 == ap_reg_ioackin_ddr_ARREADY))) begin
        ddr_ARVALID = ap_const_logic_1;
    end else begin
        ddr_ARVALID = ap_const_logic_0;
    end
end

/// ddr_RREADY assign process. ///
always @ (ap_CS_fsm or ap_sig_bdd_366)
begin
    if (((ap_ST_st3_fsm_2 == ap_CS_fsm) & ~ap_sig_bdd_366)) begin
        ddr_RREADY = ap_const_logic_1;
    end else begin
        ddr_RREADY = ap_const_logic_0;
    end
end

/// search_string_0_ap_ack assign process. ///
always @ (ap_CS_fsm or tmp_2_fu_362_p1 or ap_sig_bdd_366)
begin
    if (((ap_ST_st3_fsm_2 == ap_CS_fsm) & (tmp_2_fu_362_p1 == ap_const_lv5_0) & ~ap_sig_bdd_366)) begin
        search_string_0_ap_ack = ap_const_logic_1;
    end else begin
        search_string_0_ap_ack = ap_const_logic_0;
    end
end

/// search_string_10_ap_ack assign process. ///
always @ (ap_CS_fsm or tmp_2_fu_362_p1 or ap_sig_bdd_366)
begin
    if (((ap_ST_st3_fsm_2 == ap_CS_fsm) & (tmp_2_fu_362_p1 == ap_const_lv5_A) & ~ap_sig_bdd_366)) begin
        search_string_10_ap_ack = ap_const_logic_1;
    end else begin
        search_string_10_ap_ack = ap_const_logic_0;
    end
end

/// search_string_11_ap_ack assign process. ///
always @ (ap_CS_fsm or tmp_2_fu_362_p1 or ap_sig_bdd_366)
begin
    if (((ap_ST_st3_fsm_2 == ap_CS_fsm) & (tmp_2_fu_362_p1 == ap_const_lv5_B) & ~ap_sig_bdd_366)) begin
        search_string_11_ap_ack = ap_const_logic_1;
    end else begin
        search_string_11_ap_ack = ap_const_logic_0;
    end
end

/// search_string_12_ap_ack assign process. ///
always @ (ap_CS_fsm or tmp_2_fu_362_p1 or ap_sig_bdd_366)
begin
    if (((ap_ST_st3_fsm_2 == ap_CS_fsm) & (tmp_2_fu_362_p1 == ap_const_lv5_C) & ~ap_sig_bdd_366)) begin
        search_string_12_ap_ack = ap_const_logic_1;
    end else begin
        search_string_12_ap_ack = ap_const_logic_0;
    end
end

/// search_string_13_ap_ack assign process. ///
always @ (ap_CS_fsm or tmp_2_fu_362_p1 or ap_sig_bdd_366)
begin
    if (((ap_ST_st3_fsm_2 == ap_CS_fsm) & (tmp_2_fu_362_p1 == ap_const_lv5_D) & ~ap_sig_bdd_366)) begin
        search_string_13_ap_ack = ap_const_logic_1;
    end else begin
        search_string_13_ap_ack = ap_const_logic_0;
    end
end

/// search_string_14_ap_ack assign process. ///
always @ (ap_CS_fsm or tmp_2_fu_362_p1 or ap_sig_bdd_366)
begin
    if (((ap_ST_st3_fsm_2 == ap_CS_fsm) & (tmp_2_fu_362_p1 == ap_const_lv5_E) & ~ap_sig_bdd_366)) begin
        search_string_14_ap_ack = ap_const_logic_1;
    end else begin
        search_string_14_ap_ack = ap_const_logic_0;
    end
end

/// search_string_15_ap_ack assign process. ///
always @ (ap_CS_fsm or tmp_2_fu_362_p1 or ap_sig_bdd_366)
begin
    if (((ap_ST_st3_fsm_2 == ap_CS_fsm) & (tmp_2_fu_362_p1 == ap_const_lv5_F) & ~ap_sig_bdd_366)) begin
        search_string_15_ap_ack = ap_const_logic_1;
    end else begin
        search_string_15_ap_ack = ap_const_logic_0;
    end
end

/// search_string_16_ap_ack assign process. ///
always @ (ap_CS_fsm or tmp_2_fu_362_p1 or ap_sig_bdd_366)
begin
    if (((ap_ST_st3_fsm_2 == ap_CS_fsm) & ~(tmp_2_fu_362_p1 == ap_const_lv5_F) & ~(tmp_2_fu_362_p1 == ap_const_lv5_E) & ~(tmp_2_fu_362_p1 == ap_const_lv5_D) & ~(tmp_2_fu_362_p1 == ap_const_lv5_C) & ~(tmp_2_fu_362_p1 == ap_const_lv5_B) & ~(tmp_2_fu_362_p1 == ap_const_lv5_A) & ~(tmp_2_fu_362_p1 == ap_const_lv5_9) & ~(tmp_2_fu_362_p1 == ap_const_lv5_8) & ~(tmp_2_fu_362_p1 == ap_const_lv5_7) & ~(tmp_2_fu_362_p1 == ap_const_lv5_6) & ~(tmp_2_fu_362_p1 == ap_const_lv5_5) & ~(tmp_2_fu_362_p1 == ap_const_lv5_4) & ~(tmp_2_fu_362_p1 == ap_const_lv5_3) & ~(tmp_2_fu_362_p1 == ap_const_lv5_2) & ~(tmp_2_fu_362_p1 == ap_const_lv5_1) & ~(tmp_2_fu_362_p1 == ap_const_lv5_0) & ~ap_sig_bdd_366)) begin
        search_string_16_ap_ack = ap_const_logic_1;
    end else begin
        search_string_16_ap_ack = ap_const_logic_0;
    end
end

/// search_string_1_ap_ack assign process. ///
always @ (ap_CS_fsm or tmp_2_fu_362_p1 or ap_sig_bdd_366)
begin
    if (((ap_ST_st3_fsm_2 == ap_CS_fsm) & (tmp_2_fu_362_p1 == ap_const_lv5_1) & ~ap_sig_bdd_366)) begin
        search_string_1_ap_ack = ap_const_logic_1;
    end else begin
        search_string_1_ap_ack = ap_const_logic_0;
    end
end

/// search_string_2_ap_ack assign process. ///
always @ (ap_CS_fsm or tmp_2_fu_362_p1 or ap_sig_bdd_366)
begin
    if (((ap_ST_st3_fsm_2 == ap_CS_fsm) & (tmp_2_fu_362_p1 == ap_const_lv5_2) & ~ap_sig_bdd_366)) begin
        search_string_2_ap_ack = ap_const_logic_1;
    end else begin
        search_string_2_ap_ack = ap_const_logic_0;
    end
end

/// search_string_3_ap_ack assign process. ///
always @ (ap_CS_fsm or tmp_2_fu_362_p1 or ap_sig_bdd_366)
begin
    if (((ap_ST_st3_fsm_2 == ap_CS_fsm) & (tmp_2_fu_362_p1 == ap_const_lv5_3) & ~ap_sig_bdd_366)) begin
        search_string_3_ap_ack = ap_const_logic_1;
    end else begin
        search_string_3_ap_ack = ap_const_logic_0;
    end
end

/// search_string_4_ap_ack assign process. ///
always @ (ap_CS_fsm or tmp_2_fu_362_p1 or ap_sig_bdd_366)
begin
    if (((ap_ST_st3_fsm_2 == ap_CS_fsm) & (tmp_2_fu_362_p1 == ap_const_lv5_4) & ~ap_sig_bdd_366)) begin
        search_string_4_ap_ack = ap_const_logic_1;
    end else begin
        search_string_4_ap_ack = ap_const_logic_0;
    end
end

/// search_string_5_ap_ack assign process. ///
always @ (ap_CS_fsm or tmp_2_fu_362_p1 or ap_sig_bdd_366)
begin
    if (((ap_ST_st3_fsm_2 == ap_CS_fsm) & (tmp_2_fu_362_p1 == ap_const_lv5_5) & ~ap_sig_bdd_366)) begin
        search_string_5_ap_ack = ap_const_logic_1;
    end else begin
        search_string_5_ap_ack = ap_const_logic_0;
    end
end

/// search_string_6_ap_ack assign process. ///
always @ (ap_CS_fsm or tmp_2_fu_362_p1 or ap_sig_bdd_366)
begin
    if (((ap_ST_st3_fsm_2 == ap_CS_fsm) & (tmp_2_fu_362_p1 == ap_const_lv5_6) & ~ap_sig_bdd_366)) begin
        search_string_6_ap_ack = ap_const_logic_1;
    end else begin
        search_string_6_ap_ack = ap_const_logic_0;
    end
end

/// search_string_7_ap_ack assign process. ///
always @ (ap_CS_fsm or tmp_2_fu_362_p1 or ap_sig_bdd_366)
begin
    if (((ap_ST_st3_fsm_2 == ap_CS_fsm) & (tmp_2_fu_362_p1 == ap_const_lv5_7) & ~ap_sig_bdd_366)) begin
        search_string_7_ap_ack = ap_const_logic_1;
    end else begin
        search_string_7_ap_ack = ap_const_logic_0;
    end
end

/// search_string_8_ap_ack assign process. ///
always @ (ap_CS_fsm or tmp_2_fu_362_p1 or ap_sig_bdd_366)
begin
    if (((ap_ST_st3_fsm_2 == ap_CS_fsm) & (tmp_2_fu_362_p1 == ap_const_lv5_8) & ~ap_sig_bdd_366)) begin
        search_string_8_ap_ack = ap_const_logic_1;
    end else begin
        search_string_8_ap_ack = ap_const_logic_0;
    end
end

/// search_string_9_ap_ack assign process. ///
always @ (ap_CS_fsm or tmp_2_fu_362_p1 or ap_sig_bdd_366)
begin
    if (((ap_ST_st3_fsm_2 == ap_CS_fsm) & (tmp_2_fu_362_p1 == ap_const_lv5_9) & ~ap_sig_bdd_366)) begin
        search_string_9_ap_ack = ap_const_logic_1;
    end else begin
        search_string_9_ap_ack = ap_const_logic_0;
    end
end
always @ (ap_start or ap_CS_fsm or exitcond1_fu_339_p2 or ap_sig_ioackin_ddr_ARREADY or ap_sig_bdd_366)
begin
    case (ap_CS_fsm)
        ap_ST_st1_fsm_0 : 
            if (~(ap_start == ap_const_logic_0)) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end
        ap_ST_st2_fsm_1 : 
            if ((~((exitcond1_fu_339_p2 == ap_const_lv1_0) & (ap_const_logic_0 == ap_sig_ioackin_ddr_ARREADY)) & ~(exitcond1_fu_339_p2 == ap_const_lv1_0))) begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end else if (((exitcond1_fu_339_p2 == ap_const_lv1_0) & ~((exitcond1_fu_339_p2 == ap_const_lv1_0) & (ap_const_logic_0 == ap_sig_ioackin_ddr_ARREADY)))) begin
                ap_NS_fsm = ap_ST_st3_fsm_2;
            end else begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end
        ap_ST_st3_fsm_2 : 
            if (~ap_sig_bdd_366) begin
                ap_NS_fsm = ap_ST_st4_fsm_3;
            end else begin
                ap_NS_fsm = ap_ST_st3_fsm_2;
            end
        ap_ST_st4_fsm_3 : 
            ap_NS_fsm = ap_ST_st2_fsm_1;
        default : 
            ap_NS_fsm = 'bx;
    endcase
end
assign ap_return = ap_const_lv1_1;

/// ap_sig_bdd_366 assign process. ///
always @ (search_string_0_ap_vld or search_string_1_ap_vld or search_string_2_ap_vld or search_string_3_ap_vld or search_string_4_ap_vld or search_string_5_ap_vld or search_string_6_ap_vld or search_string_7_ap_vld or search_string_8_ap_vld or search_string_9_ap_vld or search_string_10_ap_vld or search_string_11_ap_vld or search_string_12_ap_vld or search_string_13_ap_vld or search_string_14_ap_vld or search_string_15_ap_vld or search_string_16_ap_vld or ddr_RVALID or tmp_2_fu_362_p1)
begin
    ap_sig_bdd_366 = ((ddr_RVALID == ap_const_logic_0) | ((search_string_15_ap_vld == ap_const_logic_0) & (tmp_2_fu_362_p1 == ap_const_lv5_F)) | ((search_string_14_ap_vld == ap_const_logic_0) & (tmp_2_fu_362_p1 == ap_const_lv5_E)) | ((search_string_13_ap_vld == ap_const_logic_0) & (tmp_2_fu_362_p1 == ap_const_lv5_D)) | ((search_string_12_ap_vld == ap_const_logic_0) & (tmp_2_fu_362_p1 == ap_const_lv5_C)) | ((search_string_11_ap_vld == ap_const_logic_0) & (tmp_2_fu_362_p1 == ap_const_lv5_B)) | ((search_string_10_ap_vld == ap_const_logic_0) & (tmp_2_fu_362_p1 == ap_const_lv5_A)) | ((search_string_9_ap_vld == ap_const_logic_0) & (tmp_2_fu_362_p1 == ap_const_lv5_9)) | ((search_string_8_ap_vld == ap_const_logic_0) & (tmp_2_fu_362_p1 == ap_const_lv5_8)) | ((search_string_7_ap_vld == ap_const_logic_0) & (tmp_2_fu_362_p1 == ap_const_lv5_7)) | ((search_string_6_ap_vld == ap_const_logic_0) & (tmp_2_fu_362_p1 == ap_const_lv5_6)) | ((search_string_5_ap_vld == ap_const_logic_0) & (tmp_2_fu_362_p1 == ap_const_lv5_5)) | ((search_string_4_ap_vld == ap_const_logic_0) & (tmp_2_fu_362_p1 == ap_const_lv5_4)) | ((search_string_3_ap_vld == ap_const_logic_0) & (tmp_2_fu_362_p1 == ap_const_lv5_3)) | ((search_string_2_ap_vld == ap_const_logic_0) & (tmp_2_fu_362_p1 == ap_const_lv5_2)) | ((search_string_1_ap_vld == ap_const_logic_0) & (tmp_2_fu_362_p1 == ap_const_lv5_1)) | ((search_string_0_ap_vld == ap_const_logic_0) & (tmp_2_fu_362_p1 == ap_const_lv5_0)) | ((search_string_16_ap_vld == ap_const_logic_0) & ~(tmp_2_fu_362_p1 == ap_const_lv5_F) & ~(tmp_2_fu_362_p1 == ap_const_lv5_E) & ~(tmp_2_fu_362_p1 == ap_const_lv5_D) & ~(tmp_2_fu_362_p1 == ap_const_lv5_C) & ~(tmp_2_fu_362_p1 == ap_const_lv5_B) & ~(tmp_2_fu_362_p1 == ap_const_lv5_A) & ~(tmp_2_fu_362_p1 == ap_const_lv5_9) & ~(tmp_2_fu_362_p1 == ap_const_lv5_8) & ~(tmp_2_fu_362_p1 == ap_const_lv5_7) & ~(tmp_2_fu_362_p1 == ap_const_lv5_6) & ~(tmp_2_fu_362_p1 == ap_const_lv5_5) & ~(tmp_2_fu_362_p1 == ap_const_lv5_4) & ~(tmp_2_fu_362_p1 == ap_const_lv5_3) & ~(tmp_2_fu_362_p1 == ap_const_lv5_2) & ~(tmp_2_fu_362_p1 == ap_const_lv5_1) & ~(tmp_2_fu_362_p1 == ap_const_lv5_0)));
end

/// ap_sig_bdd_369 assign process. ///
always @ (ap_CS_fsm or ap_sig_bdd_366)
begin
    ap_sig_bdd_369 = ((ap_ST_st3_fsm_2 == ap_CS_fsm) & ~ap_sig_bdd_366);
end

/// ap_sig_bdd_444 assign process. ///
always @ (ap_CS_fsm or exitcond1_fu_339_p2)
begin
    ap_sig_bdd_444 = ((ap_ST_st2_fsm_1 == ap_CS_fsm) & (exitcond1_fu_339_p2 == ap_const_lv1_0));
end
assign count_0_1_fu_407_p3 = ((icmp_fu_395_p2)? count_0_fu_401_p2: count_reg_251);
assign count_0_2_fu_423_p3 = ((icmp_fu_395_p2)? count_0_fu_401_p2: tmp_reg_275);
assign count_0_fu_401_p2 = (count_reg_251 + ap_const_lv32_1);
assign count_out = tmp_reg_275;
assign ddr_ARADDR = tmp_1_fu_351_p1;
assign ddr_ARBURST = ap_const_lv2_0;
assign ddr_ARCACHE = ap_const_lv4_0;
assign ddr_ARID = ap_const_lv1_0;
assign ddr_ARLEN = ap_const_lv32_1;
assign ddr_ARLOCK = ap_const_lv2_0;
assign ddr_ARPROT = ap_const_lv3_0;
assign ddr_ARQOS = ap_const_lv4_0;
assign ddr_ARREGION = ap_const_lv4_0;
assign ddr_ARSIZE = ap_const_lv3_0;
assign ddr_ARUSER = ap_const_lv1_0;
assign ddr_AWADDR = ap_const_lv32_0;
assign ddr_AWBURST = ap_const_lv2_0;
assign ddr_AWCACHE = ap_const_lv4_0;
assign ddr_AWID = ap_const_lv1_0;
assign ddr_AWLEN = ap_const_lv32_0;
assign ddr_AWLOCK = ap_const_lv2_0;
assign ddr_AWPROT = ap_const_lv3_0;
assign ddr_AWQOS = ap_const_lv4_0;
assign ddr_AWREGION = ap_const_lv4_0;
assign ddr_AWSIZE = ap_const_lv3_0;
assign ddr_AWUSER = ap_const_lv1_0;
assign ddr_AWVALID = ap_const_logic_0;
assign ddr_BREADY = ap_const_logic_0;
assign ddr_WDATA = ap_const_lv8_0;
assign ddr_WID = ap_const_lv1_0;
assign ddr_WLAST = ap_const_logic_0;
assign ddr_WSTRB = ap_const_lv1_0;
assign ddr_WUSER = ap_const_lv1_0;
assign ddr_WVALID = ap_const_logic_0;
assign exitcond1_fu_339_p2 = (j_reg_288 == ap_const_lv31_40000000? 1'b1: 1'b0);
assign icmp_fu_395_p2 = ($signed(tmp_5_fu_385_p4) > $signed(28'b0000000000000000000000000000)? 1'b1: 1'b0);
assign search_index_0_1_fu_415_p3 = ((icmp_fu_395_p2)? ap_const_lv32_0: search_index_0_fu_377_p3);
assign search_index_0_fu_377_p3 = ((tmp_3_fu_366_p2)? tmp_4_fu_371_p2: ap_const_lv32_0);
assign tmp_1_fu_351_p1 = $unsigned(j_reg_288);
assign tmp_2_fu_362_p1 = search_index_reg_263[4:0];
assign tmp_3_fu_366_p2 = (ddr_addr_read_reg_445 == search_string_load_phi_reg_299? 1'b1: 1'b0);
assign tmp_4_fu_371_p2 = (search_index_reg_263 + ap_const_lv32_1);
assign tmp_5_fu_385_p4 = {{search_index_0_fu_377_p3[ap_const_lv32_1F : ap_const_lv32_4]}};
assign tmp_8_fu_345_p2 = (j_reg_288 + ap_const_lv31_1);


endmodule //memory_scanner

