-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2014.1
-- Copyright (C) 2014 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity memory_scanner is
generic (
    C_S_AXI_AXILITES_ADDR_WIDTH : INTEGER := 8;
    C_S_AXI_AXILITES_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_DDR_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_DDR_ID_WIDTH : INTEGER := 1;
    C_M_AXI_DDR_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DDR_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_DDR_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DDR_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DDR_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DDR_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DDR_TARGET_ADDR : INTEGER := 0;
    C_M_AXI_DDR_USER_VALUE : INTEGER := 0;
    C_M_AXI_DDR_PROT_VALUE : INTEGER := 0;
    C_M_AXI_DDR_CACHE_VALUE : INTEGER := 3 );
port (
    s_axi_AXILiteS_AWVALID : IN STD_LOGIC;
    s_axi_AXILiteS_AWREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_WVALID : IN STD_LOGIC;
    s_axi_AXILiteS_WREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH/8-1 downto 0);
    s_axi_AXILiteS_ARVALID : IN STD_LOGIC;
    s_axi_AXILiteS_ARREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_RVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_RREADY : IN STD_LOGIC;
    s_axi_AXILiteS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_AXILiteS_BVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_BREADY : IN STD_LOGIC;
    s_axi_AXILiteS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    m_axi_ddr_AWVALID : OUT STD_LOGIC;
    m_axi_ddr_AWREADY : IN STD_LOGIC;
    m_axi_ddr_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_DDR_ADDR_WIDTH-1 downto 0);
    m_axi_ddr_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_DDR_ID_WIDTH-1 downto 0);
    m_axi_ddr_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_ddr_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_ddr_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_ddr_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_ddr_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_ddr_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_ddr_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_ddr_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_ddr_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DDR_AWUSER_WIDTH-1 downto 0);
    m_axi_ddr_WVALID : OUT STD_LOGIC;
    m_axi_ddr_WREADY : IN STD_LOGIC;
    m_axi_ddr_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DDR_DATA_WIDTH-1 downto 0);
    m_axi_ddr_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DDR_DATA_WIDTH/8-1 downto 0);
    m_axi_ddr_WLAST : OUT STD_LOGIC;
    m_axi_ddr_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_DDR_ID_WIDTH-1 downto 0);
    m_axi_ddr_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DDR_WUSER_WIDTH-1 downto 0);
    m_axi_ddr_ARVALID : OUT STD_LOGIC;
    m_axi_ddr_ARREADY : IN STD_LOGIC;
    m_axi_ddr_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_DDR_ADDR_WIDTH-1 downto 0);
    m_axi_ddr_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_DDR_ID_WIDTH-1 downto 0);
    m_axi_ddr_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_ddr_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_ddr_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_ddr_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_ddr_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_ddr_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_ddr_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_ddr_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_ddr_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DDR_ARUSER_WIDTH-1 downto 0);
    m_axi_ddr_RVALID : IN STD_LOGIC;
    m_axi_ddr_RREADY : OUT STD_LOGIC;
    m_axi_ddr_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DDR_DATA_WIDTH-1 downto 0);
    m_axi_ddr_RLAST : IN STD_LOGIC;
    m_axi_ddr_RID : IN STD_LOGIC_VECTOR (C_M_AXI_DDR_ID_WIDTH-1 downto 0);
    m_axi_ddr_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_DDR_RUSER_WIDTH-1 downto 0);
    m_axi_ddr_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_ddr_BVALID : IN STD_LOGIC;
    m_axi_ddr_BREADY : OUT STD_LOGIC;
    m_axi_ddr_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_ddr_BID : IN STD_LOGIC_VECTOR (C_M_AXI_DDR_ID_WIDTH-1 downto 0);
    m_axi_ddr_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_DDR_BUSER_WIDTH-1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of memory_scanner is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "memory_scanner,hls_ip_2014_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.750000,HLS_SYN_LAT=3221225473,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=0,HLS_SYN_LUT=0}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_st3_fsm_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_ST_st4_fsm_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant C_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv5_F : STD_LOGIC_VECTOR (4 downto 0) := "01111";
    constant ap_const_lv5_E : STD_LOGIC_VECTOR (4 downto 0) := "01110";
    constant ap_const_lv5_D : STD_LOGIC_VECTOR (4 downto 0) := "01101";
    constant ap_const_lv5_C : STD_LOGIC_VECTOR (4 downto 0) := "01100";
    constant ap_const_lv5_B : STD_LOGIC_VECTOR (4 downto 0) := "01011";
    constant ap_const_lv5_A : STD_LOGIC_VECTOR (4 downto 0) := "01010";
    constant ap_const_lv5_9 : STD_LOGIC_VECTOR (4 downto 0) := "01001";
    constant ap_const_lv5_8 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_const_lv5_7 : STD_LOGIC_VECTOR (4 downto 0) := "00111";
    constant ap_const_lv5_6 : STD_LOGIC_VECTOR (4 downto 0) := "00110";
    constant ap_const_lv5_5 : STD_LOGIC_VECTOR (4 downto 0) := "00101";
    constant ap_const_lv5_4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_const_lv5_3 : STD_LOGIC_VECTOR (4 downto 0) := "00011";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv31_40000000 : STD_LOGIC_VECTOR (30 downto 0) := "1000000000000000000000000000000";
    constant ap_const_lv31_1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv28_0 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_true : BOOLEAN := true;

    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal ap_ready : STD_LOGIC;
    signal search_string_0 : STD_LOGIC_VECTOR (7 downto 0);
    signal search_string_0_ap_vld : STD_LOGIC;
    signal search_string_0_ap_ack : STD_LOGIC;
    signal search_string_1 : STD_LOGIC_VECTOR (7 downto 0);
    signal search_string_1_ap_vld : STD_LOGIC;
    signal search_string_1_ap_ack : STD_LOGIC;
    signal search_string_2 : STD_LOGIC_VECTOR (7 downto 0);
    signal search_string_2_ap_vld : STD_LOGIC;
    signal search_string_2_ap_ack : STD_LOGIC;
    signal search_string_3 : STD_LOGIC_VECTOR (7 downto 0);
    signal search_string_3_ap_vld : STD_LOGIC;
    signal search_string_3_ap_ack : STD_LOGIC;
    signal search_string_4 : STD_LOGIC_VECTOR (7 downto 0);
    signal search_string_4_ap_vld : STD_LOGIC;
    signal search_string_4_ap_ack : STD_LOGIC;
    signal search_string_5 : STD_LOGIC_VECTOR (7 downto 0);
    signal search_string_5_ap_vld : STD_LOGIC;
    signal search_string_5_ap_ack : STD_LOGIC;
    signal search_string_6 : STD_LOGIC_VECTOR (7 downto 0);
    signal search_string_6_ap_vld : STD_LOGIC;
    signal search_string_6_ap_ack : STD_LOGIC;
    signal search_string_7 : STD_LOGIC_VECTOR (7 downto 0);
    signal search_string_7_ap_vld : STD_LOGIC;
    signal search_string_7_ap_ack : STD_LOGIC;
    signal search_string_8 : STD_LOGIC_VECTOR (7 downto 0);
    signal search_string_8_ap_vld : STD_LOGIC;
    signal search_string_8_ap_ack : STD_LOGIC;
    signal search_string_9 : STD_LOGIC_VECTOR (7 downto 0);
    signal search_string_9_ap_vld : STD_LOGIC;
    signal search_string_9_ap_ack : STD_LOGIC;
    signal search_string_10 : STD_LOGIC_VECTOR (7 downto 0);
    signal search_string_10_ap_vld : STD_LOGIC;
    signal search_string_10_ap_ack : STD_LOGIC;
    signal search_string_11 : STD_LOGIC_VECTOR (7 downto 0);
    signal search_string_11_ap_vld : STD_LOGIC;
    signal search_string_11_ap_ack : STD_LOGIC;
    signal search_string_12 : STD_LOGIC_VECTOR (7 downto 0);
    signal search_string_12_ap_vld : STD_LOGIC;
    signal search_string_12_ap_ack : STD_LOGIC;
    signal search_string_13 : STD_LOGIC_VECTOR (7 downto 0);
    signal search_string_13_ap_vld : STD_LOGIC;
    signal search_string_13_ap_ack : STD_LOGIC;
    signal search_string_14 : STD_LOGIC_VECTOR (7 downto 0);
    signal search_string_14_ap_vld : STD_LOGIC;
    signal search_string_14_ap_ack : STD_LOGIC;
    signal search_string_15 : STD_LOGIC_VECTOR (7 downto 0);
    signal search_string_15_ap_vld : STD_LOGIC;
    signal search_string_15_ap_ack : STD_LOGIC;
    signal search_string_16 : STD_LOGIC_VECTOR (7 downto 0);
    signal search_string_16_ap_vld : STD_LOGIC;
    signal search_string_16_ap_ack : STD_LOGIC;
    signal count_out : STD_LOGIC_VECTOR (31 downto 0);
    signal count_out_ap_vld : STD_LOGIC;
    signal ap_return : STD_LOGIC_VECTOR (0 downto 0);
    signal ddr_AWVALID : STD_LOGIC;
    signal ddr_AWREADY : STD_LOGIC;
    signal ddr_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal ddr_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal ddr_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal ddr_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal ddr_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal ddr_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal ddr_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal ddr_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal ddr_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal ddr_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal ddr_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal ddr_WVALID : STD_LOGIC;
    signal ddr_WREADY : STD_LOGIC;
    signal ddr_WDATA : STD_LOGIC_VECTOR (7 downto 0);
    signal ddr_WSTRB : STD_LOGIC_VECTOR (0 downto 0);
    signal ddr_WLAST : STD_LOGIC;
    signal ddr_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal ddr_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal ddr_ARVALID : STD_LOGIC;
    signal ddr_ARREADY : STD_LOGIC;
    signal ddr_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal ddr_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal ddr_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal ddr_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal ddr_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal ddr_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal ddr_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal ddr_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal ddr_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal ddr_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal ddr_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal ddr_RVALID : STD_LOGIC;
    signal ddr_RREADY : STD_LOGIC;
    signal ddr_RDATA : STD_LOGIC_VECTOR (7 downto 0);
    signal ddr_RLAST : STD_LOGIC;
    signal ddr_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal ddr_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal ddr_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal ddr_BVALID : STD_LOGIC;
    signal ddr_BREADY : STD_LOGIC;
    signal ddr_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal ddr_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal ddr_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_8_fu_345_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_8_reg_434 : STD_LOGIC_VECTOR (30 downto 0);
    signal exitcond1_fu_339_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_ioackin_ddr_ARREADY : STD_LOGIC;
    signal ddr_addr_read_reg_445 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_2_fu_362_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_sig_bdd_366 : BOOLEAN;
    signal count_0_1_fu_407_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal search_index_0_1_fu_415_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal count_0_2_fu_423_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal count_reg_251 : STD_LOGIC_VECTOR (31 downto 0);
    signal search_index_reg_263 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_reg_275 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_reg_288 : STD_LOGIC_VECTOR (30 downto 0);
    signal search_string_load_phi_reg_299 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_1_fu_351_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ioackin_ddr_ARREADY : STD_LOGIC := '0';
    signal tmp_3_fu_366_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_fu_371_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal search_index_0_fu_377_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_fu_385_p4 : STD_LOGIC_VECTOR (27 downto 0);
    signal icmp_fu_395_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal count_0_fu_401_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_sig_bdd_444 : BOOLEAN;
    signal ap_sig_bdd_369 : BOOLEAN;

    component memory_scanner_AXILiteS_s_axi IS
    generic (
        C_ADDR_WIDTH : INTEGER;
        C_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESETN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        ap_return : IN STD_LOGIC_VECTOR (0 downto 0);
        search_string_0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        search_string_0_ap_vld : OUT STD_LOGIC;
        search_string_0_ap_ack : IN STD_LOGIC;
        search_string_1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        search_string_1_ap_vld : OUT STD_LOGIC;
        search_string_1_ap_ack : IN STD_LOGIC;
        search_string_2 : OUT STD_LOGIC_VECTOR (7 downto 0);
        search_string_2_ap_vld : OUT STD_LOGIC;
        search_string_2_ap_ack : IN STD_LOGIC;
        search_string_3 : OUT STD_LOGIC_VECTOR (7 downto 0);
        search_string_3_ap_vld : OUT STD_LOGIC;
        search_string_3_ap_ack : IN STD_LOGIC;
        search_string_4 : OUT STD_LOGIC_VECTOR (7 downto 0);
        search_string_4_ap_vld : OUT STD_LOGIC;
        search_string_4_ap_ack : IN STD_LOGIC;
        search_string_5 : OUT STD_LOGIC_VECTOR (7 downto 0);
        search_string_5_ap_vld : OUT STD_LOGIC;
        search_string_5_ap_ack : IN STD_LOGIC;
        search_string_6 : OUT STD_LOGIC_VECTOR (7 downto 0);
        search_string_6_ap_vld : OUT STD_LOGIC;
        search_string_6_ap_ack : IN STD_LOGIC;
        search_string_7 : OUT STD_LOGIC_VECTOR (7 downto 0);
        search_string_7_ap_vld : OUT STD_LOGIC;
        search_string_7_ap_ack : IN STD_LOGIC;
        search_string_8 : OUT STD_LOGIC_VECTOR (7 downto 0);
        search_string_8_ap_vld : OUT STD_LOGIC;
        search_string_8_ap_ack : IN STD_LOGIC;
        search_string_9 : OUT STD_LOGIC_VECTOR (7 downto 0);
        search_string_9_ap_vld : OUT STD_LOGIC;
        search_string_9_ap_ack : IN STD_LOGIC;
        search_string_10 : OUT STD_LOGIC_VECTOR (7 downto 0);
        search_string_10_ap_vld : OUT STD_LOGIC;
        search_string_10_ap_ack : IN STD_LOGIC;
        search_string_11 : OUT STD_LOGIC_VECTOR (7 downto 0);
        search_string_11_ap_vld : OUT STD_LOGIC;
        search_string_11_ap_ack : IN STD_LOGIC;
        search_string_12 : OUT STD_LOGIC_VECTOR (7 downto 0);
        search_string_12_ap_vld : OUT STD_LOGIC;
        search_string_12_ap_ack : IN STD_LOGIC;
        search_string_13 : OUT STD_LOGIC_VECTOR (7 downto 0);
        search_string_13_ap_vld : OUT STD_LOGIC;
        search_string_13_ap_ack : IN STD_LOGIC;
        search_string_14 : OUT STD_LOGIC_VECTOR (7 downto 0);
        search_string_14_ap_vld : OUT STD_LOGIC;
        search_string_14_ap_ack : IN STD_LOGIC;
        search_string_15 : OUT STD_LOGIC_VECTOR (7 downto 0);
        search_string_15_ap_vld : OUT STD_LOGIC;
        search_string_15_ap_ack : IN STD_LOGIC;
        search_string_16 : OUT STD_LOGIC_VECTOR (7 downto 0);
        search_string_16_ap_vld : OUT STD_LOGIC;
        search_string_16_ap_ack : IN STD_LOGIC;
        count_out : IN STD_LOGIC_VECTOR (31 downto 0);
        count_out_ap_vld : IN STD_LOGIC );
    end component;


    component memory_scanner_ddr_m_axi IS
    generic (
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        C_ID_WIDTH : INTEGER;
        C_ADDR_WIDTH : INTEGER;
        C_DATA_WIDTH : INTEGER;
        C_AWUSER_WIDTH : INTEGER;
        C_ARUSER_WIDTH : INTEGER;
        C_WUSER_WIDTH : INTEGER;
        C_RUSER_WIDTH : INTEGER;
        C_BUSER_WIDTH : INTEGER;
        C_TARGET_ADDR : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESETN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (7 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (0 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    memory_scanner_AXILiteS_s_axi_U : component memory_scanner_AXILiteS_s_axi
    generic map (
        C_ADDR_WIDTH => C_S_AXI_AXILITES_ADDR_WIDTH,
        C_DATA_WIDTH => C_S_AXI_AXILITES_DATA_WIDTH)
    port map (
        AWVALID => s_axi_AXILiteS_AWVALID,
        AWREADY => s_axi_AXILiteS_AWREADY,
        AWADDR => s_axi_AXILiteS_AWADDR,
        WVALID => s_axi_AXILiteS_WVALID,
        WREADY => s_axi_AXILiteS_WREADY,
        WDATA => s_axi_AXILiteS_WDATA,
        WSTRB => s_axi_AXILiteS_WSTRB,
        ARVALID => s_axi_AXILiteS_ARVALID,
        ARREADY => s_axi_AXILiteS_ARREADY,
        ARADDR => s_axi_AXILiteS_ARADDR,
        RVALID => s_axi_AXILiteS_RVALID,
        RREADY => s_axi_AXILiteS_RREADY,
        RDATA => s_axi_AXILiteS_RDATA,
        RRESP => s_axi_AXILiteS_RRESP,
        BVALID => s_axi_AXILiteS_BVALID,
        BREADY => s_axi_AXILiteS_BREADY,
        BRESP => s_axi_AXILiteS_BRESP,
        ACLK => ap_clk,
        ARESETN => ap_rst_n,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        ap_return => ap_return,
        search_string_0 => search_string_0,
        search_string_0_ap_vld => search_string_0_ap_vld,
        search_string_0_ap_ack => search_string_0_ap_ack,
        search_string_1 => search_string_1,
        search_string_1_ap_vld => search_string_1_ap_vld,
        search_string_1_ap_ack => search_string_1_ap_ack,
        search_string_2 => search_string_2,
        search_string_2_ap_vld => search_string_2_ap_vld,
        search_string_2_ap_ack => search_string_2_ap_ack,
        search_string_3 => search_string_3,
        search_string_3_ap_vld => search_string_3_ap_vld,
        search_string_3_ap_ack => search_string_3_ap_ack,
        search_string_4 => search_string_4,
        search_string_4_ap_vld => search_string_4_ap_vld,
        search_string_4_ap_ack => search_string_4_ap_ack,
        search_string_5 => search_string_5,
        search_string_5_ap_vld => search_string_5_ap_vld,
        search_string_5_ap_ack => search_string_5_ap_ack,
        search_string_6 => search_string_6,
        search_string_6_ap_vld => search_string_6_ap_vld,
        search_string_6_ap_ack => search_string_6_ap_ack,
        search_string_7 => search_string_7,
        search_string_7_ap_vld => search_string_7_ap_vld,
        search_string_7_ap_ack => search_string_7_ap_ack,
        search_string_8 => search_string_8,
        search_string_8_ap_vld => search_string_8_ap_vld,
        search_string_8_ap_ack => search_string_8_ap_ack,
        search_string_9 => search_string_9,
        search_string_9_ap_vld => search_string_9_ap_vld,
        search_string_9_ap_ack => search_string_9_ap_ack,
        search_string_10 => search_string_10,
        search_string_10_ap_vld => search_string_10_ap_vld,
        search_string_10_ap_ack => search_string_10_ap_ack,
        search_string_11 => search_string_11,
        search_string_11_ap_vld => search_string_11_ap_vld,
        search_string_11_ap_ack => search_string_11_ap_ack,
        search_string_12 => search_string_12,
        search_string_12_ap_vld => search_string_12_ap_vld,
        search_string_12_ap_ack => search_string_12_ap_ack,
        search_string_13 => search_string_13,
        search_string_13_ap_vld => search_string_13_ap_vld,
        search_string_13_ap_ack => search_string_13_ap_ack,
        search_string_14 => search_string_14,
        search_string_14_ap_vld => search_string_14_ap_vld,
        search_string_14_ap_ack => search_string_14_ap_ack,
        search_string_15 => search_string_15,
        search_string_15_ap_vld => search_string_15_ap_vld,
        search_string_15_ap_ack => search_string_15_ap_ack,
        search_string_16 => search_string_16,
        search_string_16_ap_vld => search_string_16_ap_vld,
        search_string_16_ap_ack => search_string_16_ap_ack,
        count_out => count_out,
        count_out_ap_vld => count_out_ap_vld);

    memory_scanner_ddr_m_axi_U : component memory_scanner_ddr_m_axi
    generic map (
        USER_DW => 8,
        USER_AW => 32,
        USER_MAXREQS => 2,
        C_ID_WIDTH => C_M_AXI_DDR_ID_WIDTH,
        C_ADDR_WIDTH => C_M_AXI_DDR_ADDR_WIDTH,
        C_DATA_WIDTH => C_M_AXI_DDR_DATA_WIDTH,
        C_AWUSER_WIDTH => C_M_AXI_DDR_AWUSER_WIDTH,
        C_ARUSER_WIDTH => C_M_AXI_DDR_ARUSER_WIDTH,
        C_WUSER_WIDTH => C_M_AXI_DDR_WUSER_WIDTH,
        C_RUSER_WIDTH => C_M_AXI_DDR_RUSER_WIDTH,
        C_BUSER_WIDTH => C_M_AXI_DDR_BUSER_WIDTH,
        C_TARGET_ADDR => C_M_AXI_DDR_TARGET_ADDR,
        C_USER_VALUE => C_M_AXI_DDR_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_DDR_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_DDR_CACHE_VALUE)
    port map (
        AWVALID => m_axi_ddr_AWVALID,
        AWREADY => m_axi_ddr_AWREADY,
        AWADDR => m_axi_ddr_AWADDR,
        AWID => m_axi_ddr_AWID,
        AWLEN => m_axi_ddr_AWLEN,
        AWSIZE => m_axi_ddr_AWSIZE,
        AWBURST => m_axi_ddr_AWBURST,
        AWLOCK => m_axi_ddr_AWLOCK,
        AWCACHE => m_axi_ddr_AWCACHE,
        AWPROT => m_axi_ddr_AWPROT,
        AWQOS => m_axi_ddr_AWQOS,
        AWREGION => m_axi_ddr_AWREGION,
        AWUSER => m_axi_ddr_AWUSER,
        WVALID => m_axi_ddr_WVALID,
        WREADY => m_axi_ddr_WREADY,
        WDATA => m_axi_ddr_WDATA,
        WSTRB => m_axi_ddr_WSTRB,
        WLAST => m_axi_ddr_WLAST,
        WID => m_axi_ddr_WID,
        WUSER => m_axi_ddr_WUSER,
        ARVALID => m_axi_ddr_ARVALID,
        ARREADY => m_axi_ddr_ARREADY,
        ARADDR => m_axi_ddr_ARADDR,
        ARID => m_axi_ddr_ARID,
        ARLEN => m_axi_ddr_ARLEN,
        ARSIZE => m_axi_ddr_ARSIZE,
        ARBURST => m_axi_ddr_ARBURST,
        ARLOCK => m_axi_ddr_ARLOCK,
        ARCACHE => m_axi_ddr_ARCACHE,
        ARPROT => m_axi_ddr_ARPROT,
        ARQOS => m_axi_ddr_ARQOS,
        ARREGION => m_axi_ddr_ARREGION,
        ARUSER => m_axi_ddr_ARUSER,
        RVALID => m_axi_ddr_RVALID,
        RREADY => m_axi_ddr_RREADY,
        RDATA => m_axi_ddr_RDATA,
        RLAST => m_axi_ddr_RLAST,
        RID => m_axi_ddr_RID,
        RUSER => m_axi_ddr_RUSER,
        RRESP => m_axi_ddr_RRESP,
        BVALID => m_axi_ddr_BVALID,
        BREADY => m_axi_ddr_BREADY,
        BRESP => m_axi_ddr_BRESP,
        BID => m_axi_ddr_BID,
        BUSER => m_axi_ddr_BUSER,
        ACLK => ap_clk,
        ARESETN => ap_rst_n,
        I_ARVALID => ddr_ARVALID,
        I_ARREADY => ddr_ARREADY,
        I_ARADDR => ddr_ARADDR,
        I_ARID => ddr_ARID,
        I_ARLEN => ddr_ARLEN,
        I_ARSIZE => ddr_ARSIZE,
        I_ARLOCK => ddr_ARLOCK,
        I_ARCACHE => ddr_ARCACHE,
        I_ARQOS => ddr_ARQOS,
        I_ARPROT => ddr_ARPROT,
        I_ARUSER => ddr_ARUSER,
        I_ARBURST => ddr_ARBURST,
        I_ARREGION => ddr_ARREGION,
        I_RVALID => ddr_RVALID,
        I_RREADY => ddr_RREADY,
        I_RDATA => ddr_RDATA,
        I_RID => ddr_RID,
        I_RUSER => ddr_RUSER,
        I_RRESP => ddr_RRESP,
        I_RLAST => ddr_RLAST,
        I_AWVALID => ddr_AWVALID,
        I_AWREADY => ddr_AWREADY,
        I_AWADDR => ddr_AWADDR,
        I_AWID => ddr_AWID,
        I_AWLEN => ddr_AWLEN,
        I_AWSIZE => ddr_AWSIZE,
        I_AWLOCK => ddr_AWLOCK,
        I_AWCACHE => ddr_AWCACHE,
        I_AWQOS => ddr_AWQOS,
        I_AWPROT => ddr_AWPROT,
        I_AWUSER => ddr_AWUSER,
        I_AWBURST => ddr_AWBURST,
        I_AWREGION => ddr_AWREGION,
        I_WVALID => ddr_WVALID,
        I_WREADY => ddr_WREADY,
        I_WDATA => ddr_WDATA,
        I_WID => ddr_WID,
        I_WUSER => ddr_WUSER,
        I_WLAST => ddr_WLAST,
        I_WSTRB => ddr_WSTRB,
        I_BVALID => ddr_BVALID,
        I_BREADY => ddr_BREADY,
        I_BRESP => ddr_BRESP,
        I_BID => ddr_BID,
        I_BUSER => ddr_BUSER);





    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n = '0') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- ap_reg_ioackin_ddr_ARREADY assign process. --
    ap_reg_ioackin_ddr_ARREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n = '0') then
                ap_reg_ioackin_ddr_ARREADY <= ap_const_logic_0;
            else
                if (ap_sig_bdd_444) then
                    if (not(((exitcond1_fu_339_p2 = ap_const_lv1_0) and (ap_const_logic_0 = ap_sig_ioackin_ddr_ARREADY)))) then 
                        ap_reg_ioackin_ddr_ARREADY <= ap_const_logic_0;
                    elsif ((ap_const_logic_1 = ddr_ARREADY)) then 
                        ap_reg_ioackin_ddr_ARREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    -- count_reg_251 assign process. --
    count_reg_251_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st4_fsm_3 = ap_CS_fsm)) then 
                count_reg_251 <= count_0_1_fu_407_p3;
            elsif (((ap_ST_st1_fsm_0 = ap_CS_fsm) and not((ap_start = ap_const_logic_0)))) then 
                count_reg_251 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    -- j_reg_288 assign process. --
    j_reg_288_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st4_fsm_3 = ap_CS_fsm)) then 
                j_reg_288 <= tmp_8_reg_434;
            elsif (((ap_ST_st1_fsm_0 = ap_CS_fsm) and not((ap_start = ap_const_logic_0)))) then 
                j_reg_288 <= ap_const_lv31_0;
            end if; 
        end if;
    end process;

    -- search_index_reg_263 assign process. --
    search_index_reg_263_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st4_fsm_3 = ap_CS_fsm)) then 
                search_index_reg_263 <= search_index_0_1_fu_415_p3;
            elsif (((ap_ST_st1_fsm_0 = ap_CS_fsm) and not((ap_start = ap_const_logic_0)))) then 
                search_index_reg_263 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    -- search_string_load_phi_reg_299 assign process. --
    search_string_load_phi_reg_299_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (ap_sig_bdd_369) then
                if ((tmp_2_fu_362_p1 = ap_const_lv5_F)) then 
                    search_string_load_phi_reg_299 <= search_string_15;
                elsif ((tmp_2_fu_362_p1 = ap_const_lv5_E)) then 
                    search_string_load_phi_reg_299 <= search_string_14;
                elsif ((tmp_2_fu_362_p1 = ap_const_lv5_D)) then 
                    search_string_load_phi_reg_299 <= search_string_13;
                elsif ((tmp_2_fu_362_p1 = ap_const_lv5_C)) then 
                    search_string_load_phi_reg_299 <= search_string_12;
                elsif ((tmp_2_fu_362_p1 = ap_const_lv5_B)) then 
                    search_string_load_phi_reg_299 <= search_string_11;
                elsif ((tmp_2_fu_362_p1 = ap_const_lv5_A)) then 
                    search_string_load_phi_reg_299 <= search_string_10;
                elsif ((tmp_2_fu_362_p1 = ap_const_lv5_9)) then 
                    search_string_load_phi_reg_299 <= search_string_9;
                elsif ((tmp_2_fu_362_p1 = ap_const_lv5_8)) then 
                    search_string_load_phi_reg_299 <= search_string_8;
                elsif ((tmp_2_fu_362_p1 = ap_const_lv5_7)) then 
                    search_string_load_phi_reg_299 <= search_string_7;
                elsif ((tmp_2_fu_362_p1 = ap_const_lv5_6)) then 
                    search_string_load_phi_reg_299 <= search_string_6;
                elsif ((tmp_2_fu_362_p1 = ap_const_lv5_5)) then 
                    search_string_load_phi_reg_299 <= search_string_5;
                elsif ((tmp_2_fu_362_p1 = ap_const_lv5_4)) then 
                    search_string_load_phi_reg_299 <= search_string_4;
                elsif ((tmp_2_fu_362_p1 = ap_const_lv5_3)) then 
                    search_string_load_phi_reg_299 <= search_string_3;
                elsif ((tmp_2_fu_362_p1 = ap_const_lv5_2)) then 
                    search_string_load_phi_reg_299 <= search_string_2;
                elsif ((tmp_2_fu_362_p1 = ap_const_lv5_1)) then 
                    search_string_load_phi_reg_299 <= search_string_1;
                elsif ((tmp_2_fu_362_p1 = ap_const_lv5_0)) then 
                    search_string_load_phi_reg_299 <= search_string_0;
                elsif ((ap_true = ap_true)) then 
                    search_string_load_phi_reg_299 <= search_string_16;
                end if;
            end if; 
        end if;
    end process;

    -- tmp_reg_275 assign process. --
    tmp_reg_275_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st4_fsm_3 = ap_CS_fsm)) then 
                tmp_reg_275 <= count_0_2_fu_423_p3;
            elsif (((ap_ST_st1_fsm_0 = ap_CS_fsm) and not((ap_start = ap_const_logic_0)))) then 
                tmp_reg_275 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st3_fsm_2 = ap_CS_fsm) and not(ap_sig_bdd_366))) then
                ddr_addr_read_reg_445 <= ddr_RDATA;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st2_fsm_1 = ap_CS_fsm) and not(((exitcond1_fu_339_p2 = ap_const_lv1_0) and (ap_const_logic_0 = ap_sig_ioackin_ddr_ARREADY))))) then
                tmp_8_reg_434 <= tmp_8_fu_345_p2;
            end if;
        end if;
    end process;

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_start , ap_CS_fsm , exitcond1_fu_339_p2 , ap_sig_ioackin_ddr_ARREADY , ap_sig_bdd_366)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                if ((not(((exitcond1_fu_339_p2 = ap_const_lv1_0) and (ap_const_logic_0 = ap_sig_ioackin_ddr_ARREADY))) and not((exitcond1_fu_339_p2 = ap_const_lv1_0)))) then
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                elsif (((exitcond1_fu_339_p2 = ap_const_lv1_0) and not(((exitcond1_fu_339_p2 = ap_const_lv1_0) and (ap_const_logic_0 = ap_sig_ioackin_ddr_ARREADY))))) then
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                else
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                end if;
            when ap_ST_st3_fsm_2 => 
                if (not(ap_sig_bdd_366)) then
                    ap_NS_fsm <= ap_ST_st4_fsm_3;
                else
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                end if;
            when ap_ST_st4_fsm_3 => 
                ap_NS_fsm <= ap_ST_st2_fsm_1;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;

    -- ap_done assign process. --
    ap_done_assign_proc : process(ap_CS_fsm, exitcond1_fu_339_p2, ap_sig_ioackin_ddr_ARREADY)
    begin
        if (((ap_ST_st2_fsm_1 = ap_CS_fsm) and not(((exitcond1_fu_339_p2 = ap_const_lv1_0) and (ap_const_logic_0 = ap_sig_ioackin_ddr_ARREADY))) and not((exitcond1_fu_339_p2 = ap_const_lv1_0)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_CS_fsm)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_ST_st1_fsm_0 = ap_CS_fsm))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(ap_CS_fsm, exitcond1_fu_339_p2, ap_sig_ioackin_ddr_ARREADY)
    begin
        if (((ap_ST_st2_fsm_1 = ap_CS_fsm) and not(((exitcond1_fu_339_p2 = ap_const_lv1_0) and (ap_const_logic_0 = ap_sig_ioackin_ddr_ARREADY))) and not((exitcond1_fu_339_p2 = ap_const_lv1_0)))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= ap_const_lv1_1;

    -- ap_sig_bdd_366 assign process. --
    ap_sig_bdd_366_assign_proc : process(search_string_0_ap_vld, search_string_1_ap_vld, search_string_2_ap_vld, search_string_3_ap_vld, search_string_4_ap_vld, search_string_5_ap_vld, search_string_6_ap_vld, search_string_7_ap_vld, search_string_8_ap_vld, search_string_9_ap_vld, search_string_10_ap_vld, search_string_11_ap_vld, search_string_12_ap_vld, search_string_13_ap_vld, search_string_14_ap_vld, search_string_15_ap_vld, search_string_16_ap_vld, ddr_RVALID, tmp_2_fu_362_p1)
    begin
                ap_sig_bdd_366 <= ((ddr_RVALID = ap_const_logic_0) or ((search_string_15_ap_vld = ap_const_logic_0) and (tmp_2_fu_362_p1 = ap_const_lv5_F)) or ((search_string_14_ap_vld = ap_const_logic_0) and (tmp_2_fu_362_p1 = ap_const_lv5_E)) or ((search_string_13_ap_vld = ap_const_logic_0) and (tmp_2_fu_362_p1 = ap_const_lv5_D)) or ((search_string_12_ap_vld = ap_const_logic_0) and (tmp_2_fu_362_p1 = ap_const_lv5_C)) or ((search_string_11_ap_vld = ap_const_logic_0) and (tmp_2_fu_362_p1 = ap_const_lv5_B)) or ((search_string_10_ap_vld = ap_const_logic_0) and (tmp_2_fu_362_p1 = ap_const_lv5_A)) or ((search_string_9_ap_vld = ap_const_logic_0) and (tmp_2_fu_362_p1 = ap_const_lv5_9)) or ((search_string_8_ap_vld = ap_const_logic_0) and (tmp_2_fu_362_p1 = ap_const_lv5_8)) or ((search_string_7_ap_vld = ap_const_logic_0) and (tmp_2_fu_362_p1 = ap_const_lv5_7)) or ((search_string_6_ap_vld = ap_const_logic_0) and (tmp_2_fu_362_p1 = ap_const_lv5_6)) or ((search_string_5_ap_vld = ap_const_logic_0) and (tmp_2_fu_362_p1 = ap_const_lv5_5)) or ((search_string_4_ap_vld = ap_const_logic_0) and (tmp_2_fu_362_p1 = ap_const_lv5_4)) or ((search_string_3_ap_vld = ap_const_logic_0) and (tmp_2_fu_362_p1 = ap_const_lv5_3)) or ((search_string_2_ap_vld = ap_const_logic_0) and (tmp_2_fu_362_p1 = ap_const_lv5_2)) or ((search_string_1_ap_vld = ap_const_logic_0) and (tmp_2_fu_362_p1 = ap_const_lv5_1)) or ((search_string_0_ap_vld = ap_const_logic_0) and (tmp_2_fu_362_p1 = ap_const_lv5_0)) or ((search_string_16_ap_vld = ap_const_logic_0) and not((tmp_2_fu_362_p1 = ap_const_lv5_F)) and not((tmp_2_fu_362_p1 = ap_const_lv5_E)) and not((tmp_2_fu_362_p1 = ap_const_lv5_D)) and not((tmp_2_fu_362_p1 = ap_const_lv5_C)) and not((tmp_2_fu_362_p1 = ap_const_lv5_B)) and not((tmp_2_fu_362_p1 = ap_const_lv5_A)) and not((tmp_2_fu_362_p1 = ap_const_lv5_9)) and not((tmp_2_fu_362_p1 = ap_const_lv5_8)) and not((tmp_2_fu_362_p1 = ap_const_lv5_7)) and not((tmp_2_fu_362_p1 = ap_const_lv5_6)) and not((tmp_2_fu_362_p1 = ap_const_lv5_5)) and not((tmp_2_fu_362_p1 = ap_const_lv5_4)) and not((tmp_2_fu_362_p1 = ap_const_lv5_3)) and not((tmp_2_fu_362_p1 = ap_const_lv5_2)) and not((tmp_2_fu_362_p1 = ap_const_lv5_1)) and not((tmp_2_fu_362_p1 = ap_const_lv5_0))));
    end process;


    -- ap_sig_bdd_369 assign process. --
    ap_sig_bdd_369_assign_proc : process(ap_CS_fsm, ap_sig_bdd_366)
    begin
                ap_sig_bdd_369 <= ((ap_ST_st3_fsm_2 = ap_CS_fsm) and not(ap_sig_bdd_366));
    end process;


    -- ap_sig_bdd_444 assign process. --
    ap_sig_bdd_444_assign_proc : process(ap_CS_fsm, exitcond1_fu_339_p2)
    begin
                ap_sig_bdd_444 <= ((ap_ST_st2_fsm_1 = ap_CS_fsm) and (exitcond1_fu_339_p2 = ap_const_lv1_0));
    end process;


    -- ap_sig_ioackin_ddr_ARREADY assign process. --
    ap_sig_ioackin_ddr_ARREADY_assign_proc : process(ddr_ARREADY, ap_reg_ioackin_ddr_ARREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_ddr_ARREADY)) then 
            ap_sig_ioackin_ddr_ARREADY <= ddr_ARREADY;
        else 
            ap_sig_ioackin_ddr_ARREADY <= ap_const_logic_1;
        end if; 
    end process;

    count_0_1_fu_407_p3 <= 
        count_0_fu_401_p2 when (icmp_fu_395_p2(0) = '1') else 
        count_reg_251;
    count_0_2_fu_423_p3 <= 
        count_0_fu_401_p2 when (icmp_fu_395_p2(0) = '1') else 
        tmp_reg_275;
    count_0_fu_401_p2 <= std_logic_vector(unsigned(count_reg_251) + unsigned(ap_const_lv32_1));
    count_out <= tmp_reg_275;

    -- count_out_ap_vld assign process. --
    count_out_ap_vld_assign_proc : process(ap_CS_fsm, exitcond1_fu_339_p2)
    begin
        if (((ap_ST_st2_fsm_1 = ap_CS_fsm) and not((exitcond1_fu_339_p2 = ap_const_lv1_0)))) then 
            count_out_ap_vld <= ap_const_logic_1;
        else 
            count_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    ddr_ARADDR <= tmp_1_fu_351_p1(32 - 1 downto 0);
    ddr_ARBURST <= ap_const_lv2_0;
    ddr_ARCACHE <= ap_const_lv4_0;
    ddr_ARID <= ap_const_lv1_0;
    ddr_ARLEN <= ap_const_lv32_1;
    ddr_ARLOCK <= ap_const_lv2_0;
    ddr_ARPROT <= ap_const_lv3_0;
    ddr_ARQOS <= ap_const_lv4_0;
    ddr_ARREGION <= ap_const_lv4_0;
    ddr_ARSIZE <= ap_const_lv3_0;
    ddr_ARUSER <= ap_const_lv1_0;

    -- ddr_ARVALID assign process. --
    ddr_ARVALID_assign_proc : process(ap_CS_fsm, exitcond1_fu_339_p2, ap_reg_ioackin_ddr_ARREADY)
    begin
        if (((ap_ST_st2_fsm_1 = ap_CS_fsm) and (exitcond1_fu_339_p2 = ap_const_lv1_0) and (ap_const_logic_0 = ap_reg_ioackin_ddr_ARREADY))) then 
            ddr_ARVALID <= ap_const_logic_1;
        else 
            ddr_ARVALID <= ap_const_logic_0;
        end if; 
    end process;

    ddr_AWADDR <= ap_const_lv32_0;
    ddr_AWBURST <= ap_const_lv2_0;
    ddr_AWCACHE <= ap_const_lv4_0;
    ddr_AWID <= ap_const_lv1_0;
    ddr_AWLEN <= ap_const_lv32_0;
    ddr_AWLOCK <= ap_const_lv2_0;
    ddr_AWPROT <= ap_const_lv3_0;
    ddr_AWQOS <= ap_const_lv4_0;
    ddr_AWREGION <= ap_const_lv4_0;
    ddr_AWSIZE <= ap_const_lv3_0;
    ddr_AWUSER <= ap_const_lv1_0;
    ddr_AWVALID <= ap_const_logic_0;
    ddr_BREADY <= ap_const_logic_0;

    -- ddr_RREADY assign process. --
    ddr_RREADY_assign_proc : process(ap_CS_fsm, ap_sig_bdd_366)
    begin
        if (((ap_ST_st3_fsm_2 = ap_CS_fsm) and not(ap_sig_bdd_366))) then 
            ddr_RREADY <= ap_const_logic_1;
        else 
            ddr_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    ddr_WDATA <= ap_const_lv8_0;
    ddr_WID <= ap_const_lv1_0;
    ddr_WLAST <= ap_const_logic_0;
    ddr_WSTRB <= ap_const_lv1_0;
    ddr_WUSER <= ap_const_lv1_0;
    ddr_WVALID <= ap_const_logic_0;
    exitcond1_fu_339_p2 <= "1" when (j_reg_288 = ap_const_lv31_40000000) else "0";
    icmp_fu_395_p2 <= "1" when (signed(tmp_5_fu_385_p4) > signed(ap_const_lv28_0)) else "0";
    search_index_0_1_fu_415_p3 <= 
        ap_const_lv32_0 when (icmp_fu_395_p2(0) = '1') else 
        search_index_0_fu_377_p3;
    search_index_0_fu_377_p3 <= 
        tmp_4_fu_371_p2 when (tmp_3_fu_366_p2(0) = '1') else 
        ap_const_lv32_0;

    -- search_string_0_ap_ack assign process. --
    search_string_0_ap_ack_assign_proc : process(ap_CS_fsm, tmp_2_fu_362_p1, ap_sig_bdd_366)
    begin
        if (((ap_ST_st3_fsm_2 = ap_CS_fsm) and (tmp_2_fu_362_p1 = ap_const_lv5_0) and not(ap_sig_bdd_366))) then 
            search_string_0_ap_ack <= ap_const_logic_1;
        else 
            search_string_0_ap_ack <= ap_const_logic_0;
        end if; 
    end process;


    -- search_string_10_ap_ack assign process. --
    search_string_10_ap_ack_assign_proc : process(ap_CS_fsm, tmp_2_fu_362_p1, ap_sig_bdd_366)
    begin
        if (((ap_ST_st3_fsm_2 = ap_CS_fsm) and (tmp_2_fu_362_p1 = ap_const_lv5_A) and not(ap_sig_bdd_366))) then 
            search_string_10_ap_ack <= ap_const_logic_1;
        else 
            search_string_10_ap_ack <= ap_const_logic_0;
        end if; 
    end process;


    -- search_string_11_ap_ack assign process. --
    search_string_11_ap_ack_assign_proc : process(ap_CS_fsm, tmp_2_fu_362_p1, ap_sig_bdd_366)
    begin
        if (((ap_ST_st3_fsm_2 = ap_CS_fsm) and (tmp_2_fu_362_p1 = ap_const_lv5_B) and not(ap_sig_bdd_366))) then 
            search_string_11_ap_ack <= ap_const_logic_1;
        else 
            search_string_11_ap_ack <= ap_const_logic_0;
        end if; 
    end process;


    -- search_string_12_ap_ack assign process. --
    search_string_12_ap_ack_assign_proc : process(ap_CS_fsm, tmp_2_fu_362_p1, ap_sig_bdd_366)
    begin
        if (((ap_ST_st3_fsm_2 = ap_CS_fsm) and (tmp_2_fu_362_p1 = ap_const_lv5_C) and not(ap_sig_bdd_366))) then 
            search_string_12_ap_ack <= ap_const_logic_1;
        else 
            search_string_12_ap_ack <= ap_const_logic_0;
        end if; 
    end process;


    -- search_string_13_ap_ack assign process. --
    search_string_13_ap_ack_assign_proc : process(ap_CS_fsm, tmp_2_fu_362_p1, ap_sig_bdd_366)
    begin
        if (((ap_ST_st3_fsm_2 = ap_CS_fsm) and (tmp_2_fu_362_p1 = ap_const_lv5_D) and not(ap_sig_bdd_366))) then 
            search_string_13_ap_ack <= ap_const_logic_1;
        else 
            search_string_13_ap_ack <= ap_const_logic_0;
        end if; 
    end process;


    -- search_string_14_ap_ack assign process. --
    search_string_14_ap_ack_assign_proc : process(ap_CS_fsm, tmp_2_fu_362_p1, ap_sig_bdd_366)
    begin
        if (((ap_ST_st3_fsm_2 = ap_CS_fsm) and (tmp_2_fu_362_p1 = ap_const_lv5_E) and not(ap_sig_bdd_366))) then 
            search_string_14_ap_ack <= ap_const_logic_1;
        else 
            search_string_14_ap_ack <= ap_const_logic_0;
        end if; 
    end process;


    -- search_string_15_ap_ack assign process. --
    search_string_15_ap_ack_assign_proc : process(ap_CS_fsm, tmp_2_fu_362_p1, ap_sig_bdd_366)
    begin
        if (((ap_ST_st3_fsm_2 = ap_CS_fsm) and (tmp_2_fu_362_p1 = ap_const_lv5_F) and not(ap_sig_bdd_366))) then 
            search_string_15_ap_ack <= ap_const_logic_1;
        else 
            search_string_15_ap_ack <= ap_const_logic_0;
        end if; 
    end process;


    -- search_string_16_ap_ack assign process. --
    search_string_16_ap_ack_assign_proc : process(ap_CS_fsm, tmp_2_fu_362_p1, ap_sig_bdd_366)
    begin
        if (((ap_ST_st3_fsm_2 = ap_CS_fsm) and not((tmp_2_fu_362_p1 = ap_const_lv5_F)) and not((tmp_2_fu_362_p1 = ap_const_lv5_E)) and not((tmp_2_fu_362_p1 = ap_const_lv5_D)) and not((tmp_2_fu_362_p1 = ap_const_lv5_C)) and not((tmp_2_fu_362_p1 = ap_const_lv5_B)) and not((tmp_2_fu_362_p1 = ap_const_lv5_A)) and not((tmp_2_fu_362_p1 = ap_const_lv5_9)) and not((tmp_2_fu_362_p1 = ap_const_lv5_8)) and not((tmp_2_fu_362_p1 = ap_const_lv5_7)) and not((tmp_2_fu_362_p1 = ap_const_lv5_6)) and not((tmp_2_fu_362_p1 = ap_const_lv5_5)) and not((tmp_2_fu_362_p1 = ap_const_lv5_4)) and not((tmp_2_fu_362_p1 = ap_const_lv5_3)) and not((tmp_2_fu_362_p1 = ap_const_lv5_2)) and not((tmp_2_fu_362_p1 = ap_const_lv5_1)) and not((tmp_2_fu_362_p1 = ap_const_lv5_0)) and not(ap_sig_bdd_366))) then 
            search_string_16_ap_ack <= ap_const_logic_1;
        else 
            search_string_16_ap_ack <= ap_const_logic_0;
        end if; 
    end process;


    -- search_string_1_ap_ack assign process. --
    search_string_1_ap_ack_assign_proc : process(ap_CS_fsm, tmp_2_fu_362_p1, ap_sig_bdd_366)
    begin
        if (((ap_ST_st3_fsm_2 = ap_CS_fsm) and (tmp_2_fu_362_p1 = ap_const_lv5_1) and not(ap_sig_bdd_366))) then 
            search_string_1_ap_ack <= ap_const_logic_1;
        else 
            search_string_1_ap_ack <= ap_const_logic_0;
        end if; 
    end process;


    -- search_string_2_ap_ack assign process. --
    search_string_2_ap_ack_assign_proc : process(ap_CS_fsm, tmp_2_fu_362_p1, ap_sig_bdd_366)
    begin
        if (((ap_ST_st3_fsm_2 = ap_CS_fsm) and (tmp_2_fu_362_p1 = ap_const_lv5_2) and not(ap_sig_bdd_366))) then 
            search_string_2_ap_ack <= ap_const_logic_1;
        else 
            search_string_2_ap_ack <= ap_const_logic_0;
        end if; 
    end process;


    -- search_string_3_ap_ack assign process. --
    search_string_3_ap_ack_assign_proc : process(ap_CS_fsm, tmp_2_fu_362_p1, ap_sig_bdd_366)
    begin
        if (((ap_ST_st3_fsm_2 = ap_CS_fsm) and (tmp_2_fu_362_p1 = ap_const_lv5_3) and not(ap_sig_bdd_366))) then 
            search_string_3_ap_ack <= ap_const_logic_1;
        else 
            search_string_3_ap_ack <= ap_const_logic_0;
        end if; 
    end process;


    -- search_string_4_ap_ack assign process. --
    search_string_4_ap_ack_assign_proc : process(ap_CS_fsm, tmp_2_fu_362_p1, ap_sig_bdd_366)
    begin
        if (((ap_ST_st3_fsm_2 = ap_CS_fsm) and (tmp_2_fu_362_p1 = ap_const_lv5_4) and not(ap_sig_bdd_366))) then 
            search_string_4_ap_ack <= ap_const_logic_1;
        else 
            search_string_4_ap_ack <= ap_const_logic_0;
        end if; 
    end process;


    -- search_string_5_ap_ack assign process. --
    search_string_5_ap_ack_assign_proc : process(ap_CS_fsm, tmp_2_fu_362_p1, ap_sig_bdd_366)
    begin
        if (((ap_ST_st3_fsm_2 = ap_CS_fsm) and (tmp_2_fu_362_p1 = ap_const_lv5_5) and not(ap_sig_bdd_366))) then 
            search_string_5_ap_ack <= ap_const_logic_1;
        else 
            search_string_5_ap_ack <= ap_const_logic_0;
        end if; 
    end process;


    -- search_string_6_ap_ack assign process. --
    search_string_6_ap_ack_assign_proc : process(ap_CS_fsm, tmp_2_fu_362_p1, ap_sig_bdd_366)
    begin
        if (((ap_ST_st3_fsm_2 = ap_CS_fsm) and (tmp_2_fu_362_p1 = ap_const_lv5_6) and not(ap_sig_bdd_366))) then 
            search_string_6_ap_ack <= ap_const_logic_1;
        else 
            search_string_6_ap_ack <= ap_const_logic_0;
        end if; 
    end process;


    -- search_string_7_ap_ack assign process. --
    search_string_7_ap_ack_assign_proc : process(ap_CS_fsm, tmp_2_fu_362_p1, ap_sig_bdd_366)
    begin
        if (((ap_ST_st3_fsm_2 = ap_CS_fsm) and (tmp_2_fu_362_p1 = ap_const_lv5_7) and not(ap_sig_bdd_366))) then 
            search_string_7_ap_ack <= ap_const_logic_1;
        else 
            search_string_7_ap_ack <= ap_const_logic_0;
        end if; 
    end process;


    -- search_string_8_ap_ack assign process. --
    search_string_8_ap_ack_assign_proc : process(ap_CS_fsm, tmp_2_fu_362_p1, ap_sig_bdd_366)
    begin
        if (((ap_ST_st3_fsm_2 = ap_CS_fsm) and (tmp_2_fu_362_p1 = ap_const_lv5_8) and not(ap_sig_bdd_366))) then 
            search_string_8_ap_ack <= ap_const_logic_1;
        else 
            search_string_8_ap_ack <= ap_const_logic_0;
        end if; 
    end process;


    -- search_string_9_ap_ack assign process. --
    search_string_9_ap_ack_assign_proc : process(ap_CS_fsm, tmp_2_fu_362_p1, ap_sig_bdd_366)
    begin
        if (((ap_ST_st3_fsm_2 = ap_CS_fsm) and (tmp_2_fu_362_p1 = ap_const_lv5_9) and not(ap_sig_bdd_366))) then 
            search_string_9_ap_ack <= ap_const_logic_1;
        else 
            search_string_9_ap_ack <= ap_const_logic_0;
        end if; 
    end process;

    tmp_1_fu_351_p1 <= std_logic_vector(resize(unsigned(j_reg_288),64));
    tmp_2_fu_362_p1 <= search_index_reg_263(5 - 1 downto 0);
    tmp_3_fu_366_p2 <= "1" when (ddr_addr_read_reg_445 = search_string_load_phi_reg_299) else "0";
    tmp_4_fu_371_p2 <= std_logic_vector(unsigned(search_index_reg_263) + unsigned(ap_const_lv32_1));
    tmp_5_fu_385_p4 <= search_index_0_fu_377_p3(31 downto 4);
    tmp_8_fu_345_p2 <= std_logic_vector(unsigned(j_reg_288) + unsigned(ap_const_lv31_1));
end behav;
