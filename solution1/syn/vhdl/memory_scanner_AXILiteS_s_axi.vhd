-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2014.1
-- Copyright (C) 2014 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library IEEE;
use IEEE.STD_LOGIC_1164.all;
use IEEE.NUMERIC_STD.all;

entity memory_scanner_AXILiteS_s_axi is
    generic (
        C_ADDR_WIDTH    : INTEGER := 8;
        C_DATA_WIDTH    : INTEGER := 32);
    port (
        -- axi4 lite slave signals
        ACLK :in   STD_LOGIC;
        ARESETN :in   STD_LOGIC;
        AWADDR :in   STD_LOGIC_VECTOR(C_ADDR_WIDTH-1 downto 0);
        AWVALID :in   STD_LOGIC;
        AWREADY :out  STD_LOGIC;
        WDATA :in   STD_LOGIC_VECTOR(C_DATA_WIDTH-1 downto 0);
        WSTRB :in   STD_LOGIC_VECTOR(C_DATA_WIDTH/8-1 downto 0);
        WVALID :in   STD_LOGIC;
        WREADY :out  STD_LOGIC;
        BRESP :out  STD_LOGIC_VECTOR(1 downto 0);
        BVALID :out  STD_LOGIC;
        BREADY :in   STD_LOGIC;
        ARADDR :in   STD_LOGIC_VECTOR(C_ADDR_WIDTH-1 downto 0);
        ARVALID :in   STD_LOGIC;
        ARREADY :out  STD_LOGIC;
        RDATA :out  STD_LOGIC_VECTOR(C_DATA_WIDTH-1 downto 0);
        RRESP :out  STD_LOGIC_VECTOR(1 downto 0);
        RVALID :out  STD_LOGIC;
        RREADY :in   STD_LOGIC;
        interrupt :out  STD_LOGIC;
        -- user signals
        ap_start :out  STD_LOGIC;
        ap_done :in   STD_LOGIC;
        ap_ready :in   STD_LOGIC;
        ap_idle :in   STD_LOGIC;
        ap_return :in   STD_LOGIC_VECTOR(0 downto 0);
        search_string_0 :out  STD_LOGIC_VECTOR(7 downto 0);
        search_string_0_ap_vld :out  STD_LOGIC;
        search_string_0_ap_ack :in   STD_LOGIC;
        search_string_1 :out  STD_LOGIC_VECTOR(7 downto 0);
        search_string_1_ap_vld :out  STD_LOGIC;
        search_string_1_ap_ack :in   STD_LOGIC;
        search_string_2 :out  STD_LOGIC_VECTOR(7 downto 0);
        search_string_2_ap_vld :out  STD_LOGIC;
        search_string_2_ap_ack :in   STD_LOGIC;
        search_string_3 :out  STD_LOGIC_VECTOR(7 downto 0);
        search_string_3_ap_vld :out  STD_LOGIC;
        search_string_3_ap_ack :in   STD_LOGIC;
        search_string_4 :out  STD_LOGIC_VECTOR(7 downto 0);
        search_string_4_ap_vld :out  STD_LOGIC;
        search_string_4_ap_ack :in   STD_LOGIC;
        search_string_5 :out  STD_LOGIC_VECTOR(7 downto 0);
        search_string_5_ap_vld :out  STD_LOGIC;
        search_string_5_ap_ack :in   STD_LOGIC;
        search_string_6 :out  STD_LOGIC_VECTOR(7 downto 0);
        search_string_6_ap_vld :out  STD_LOGIC;
        search_string_6_ap_ack :in   STD_LOGIC;
        search_string_7 :out  STD_LOGIC_VECTOR(7 downto 0);
        search_string_7_ap_vld :out  STD_LOGIC;
        search_string_7_ap_ack :in   STD_LOGIC;
        search_string_8 :out  STD_LOGIC_VECTOR(7 downto 0);
        search_string_8_ap_vld :out  STD_LOGIC;
        search_string_8_ap_ack :in   STD_LOGIC;
        search_string_9 :out  STD_LOGIC_VECTOR(7 downto 0);
        search_string_9_ap_vld :out  STD_LOGIC;
        search_string_9_ap_ack :in   STD_LOGIC;
        search_string_10 :out  STD_LOGIC_VECTOR(7 downto 0);
        search_string_10_ap_vld :out  STD_LOGIC;
        search_string_10_ap_ack :in   STD_LOGIC;
        search_string_11 :out  STD_LOGIC_VECTOR(7 downto 0);
        search_string_11_ap_vld :out  STD_LOGIC;
        search_string_11_ap_ack :in   STD_LOGIC;
        search_string_12 :out  STD_LOGIC_VECTOR(7 downto 0);
        search_string_12_ap_vld :out  STD_LOGIC;
        search_string_12_ap_ack :in   STD_LOGIC;
        search_string_13 :out  STD_LOGIC_VECTOR(7 downto 0);
        search_string_13_ap_vld :out  STD_LOGIC;
        search_string_13_ap_ack :in   STD_LOGIC;
        search_string_14 :out  STD_LOGIC_VECTOR(7 downto 0);
        search_string_14_ap_vld :out  STD_LOGIC;
        search_string_14_ap_ack :in   STD_LOGIC;
        search_string_15 :out  STD_LOGIC_VECTOR(7 downto 0);
        search_string_15_ap_vld :out  STD_LOGIC;
        search_string_15_ap_ack :in   STD_LOGIC;
        search_string_16 :out  STD_LOGIC_VECTOR(7 downto 0);
        search_string_16_ap_vld :out  STD_LOGIC;
        search_string_16_ap_ack :in   STD_LOGIC;
        count_out :in   STD_LOGIC_VECTOR(31 downto 0);
        count_out_ap_vld :in   STD_LOGIC);
end entity memory_scanner_AXILiteS_s_axi;

--------------------------Address Info-------------------
-- 0x00 : Control signals
--        bit 0  - ap_start (Read/Write/COH)
--        bit 1  - ap_done (Read/COR)
--        bit 2  - ap_idle (Read)
--        bit 3  - ap_ready (Read)
--        bit 7  - auto_restart (Read/Write)
--        others - reserved
-- 0x04 : Global Interrupt Enable Register
--        bit 0  - Global Interrupt Enable (Read/Write)
--        others - reserved
-- 0x08 : IP Interrupt Enable Register (Read/Write)
--        bit 0  - Channel 0 (ap_done)
--        bit 1  - Channel 1 (ap_ready)
--        others - reserved
-- 0x0c : IP Interrupt Status Register (Read/TOW)
--        bit 0  - Channel 0 (ap_done)
--        bit 1  - Channel 1 (ap_ready)
--        others - reserved
-- 0x10 : Data signal of ap_return
--        bit 0  - ap_return[0] (Read)
--        others - reserved
-- 0x18 : Data signal of search_string_0
--        bit 7~0 - search_string_0[7:0] (Read/Write)
--        others  - reserved
-- 0x1c : Control signal of search_string_0
--        bit 0  - search_string_0_ap_vld (Read/Write/COH)
--        bit 1  - search_string_0_ap_ack (Read)
--        others - reserved
-- 0x20 : Data signal of search_string_1
--        bit 7~0 - search_string_1[7:0] (Read/Write)
--        others  - reserved
-- 0x24 : Control signal of search_string_1
--        bit 0  - search_string_1_ap_vld (Read/Write/COH)
--        bit 1  - search_string_1_ap_ack (Read)
--        others - reserved
-- 0x28 : Data signal of search_string_2
--        bit 7~0 - search_string_2[7:0] (Read/Write)
--        others  - reserved
-- 0x2c : Control signal of search_string_2
--        bit 0  - search_string_2_ap_vld (Read/Write/COH)
--        bit 1  - search_string_2_ap_ack (Read)
--        others - reserved
-- 0x30 : Data signal of search_string_3
--        bit 7~0 - search_string_3[7:0] (Read/Write)
--        others  - reserved
-- 0x34 : Control signal of search_string_3
--        bit 0  - search_string_3_ap_vld (Read/Write/COH)
--        bit 1  - search_string_3_ap_ack (Read)
--        others - reserved
-- 0x38 : Data signal of search_string_4
--        bit 7~0 - search_string_4[7:0] (Read/Write)
--        others  - reserved
-- 0x3c : Control signal of search_string_4
--        bit 0  - search_string_4_ap_vld (Read/Write/COH)
--        bit 1  - search_string_4_ap_ack (Read)
--        others - reserved
-- 0x40 : Data signal of search_string_5
--        bit 7~0 - search_string_5[7:0] (Read/Write)
--        others  - reserved
-- 0x44 : Control signal of search_string_5
--        bit 0  - search_string_5_ap_vld (Read/Write/COH)
--        bit 1  - search_string_5_ap_ack (Read)
--        others - reserved
-- 0x48 : Data signal of search_string_6
--        bit 7~0 - search_string_6[7:0] (Read/Write)
--        others  - reserved
-- 0x4c : Control signal of search_string_6
--        bit 0  - search_string_6_ap_vld (Read/Write/COH)
--        bit 1  - search_string_6_ap_ack (Read)
--        others - reserved
-- 0x50 : Data signal of search_string_7
--        bit 7~0 - search_string_7[7:0] (Read/Write)
--        others  - reserved
-- 0x54 : Control signal of search_string_7
--        bit 0  - search_string_7_ap_vld (Read/Write/COH)
--        bit 1  - search_string_7_ap_ack (Read)
--        others - reserved
-- 0x58 : Data signal of search_string_8
--        bit 7~0 - search_string_8[7:0] (Read/Write)
--        others  - reserved
-- 0x5c : Control signal of search_string_8
--        bit 0  - search_string_8_ap_vld (Read/Write/COH)
--        bit 1  - search_string_8_ap_ack (Read)
--        others - reserved
-- 0x60 : Data signal of search_string_9
--        bit 7~0 - search_string_9[7:0] (Read/Write)
--        others  - reserved
-- 0x64 : Control signal of search_string_9
--        bit 0  - search_string_9_ap_vld (Read/Write/COH)
--        bit 1  - search_string_9_ap_ack (Read)
--        others - reserved
-- 0x68 : Data signal of search_string_10
--        bit 7~0 - search_string_10[7:0] (Read/Write)
--        others  - reserved
-- 0x6c : Control signal of search_string_10
--        bit 0  - search_string_10_ap_vld (Read/Write/COH)
--        bit 1  - search_string_10_ap_ack (Read)
--        others - reserved
-- 0x70 : Data signal of search_string_11
--        bit 7~0 - search_string_11[7:0] (Read/Write)
--        others  - reserved
-- 0x74 : Control signal of search_string_11
--        bit 0  - search_string_11_ap_vld (Read/Write/COH)
--        bit 1  - search_string_11_ap_ack (Read)
--        others - reserved
-- 0x78 : Data signal of search_string_12
--        bit 7~0 - search_string_12[7:0] (Read/Write)
--        others  - reserved
-- 0x7c : Control signal of search_string_12
--        bit 0  - search_string_12_ap_vld (Read/Write/COH)
--        bit 1  - search_string_12_ap_ack (Read)
--        others - reserved
-- 0x80 : Data signal of search_string_13
--        bit 7~0 - search_string_13[7:0] (Read/Write)
--        others  - reserved
-- 0x84 : Control signal of search_string_13
--        bit 0  - search_string_13_ap_vld (Read/Write/COH)
--        bit 1  - search_string_13_ap_ack (Read)
--        others - reserved
-- 0x88 : Data signal of search_string_14
--        bit 7~0 - search_string_14[7:0] (Read/Write)
--        others  - reserved
-- 0x8c : Control signal of search_string_14
--        bit 0  - search_string_14_ap_vld (Read/Write/COH)
--        bit 1  - search_string_14_ap_ack (Read)
--        others - reserved
-- 0x90 : Data signal of search_string_15
--        bit 7~0 - search_string_15[7:0] (Read/Write)
--        others  - reserved
-- 0x94 : Control signal of search_string_15
--        bit 0  - search_string_15_ap_vld (Read/Write/COH)
--        bit 1  - search_string_15_ap_ack (Read)
--        others - reserved
-- 0x98 : Data signal of search_string_16
--        bit 7~0 - search_string_16[7:0] (Read/Write)
--        others  - reserved
-- 0x9c : Control signal of search_string_16
--        bit 0  - search_string_16_ap_vld (Read/Write/COH)
--        bit 1  - search_string_16_ap_ack (Read)
--        others - reserved
-- 0xa0 : Data signal of count_out
--        bit 31~0 - count_out[31:0] (Read)
-- 0xa4 : Control signal of count_out
--        bit 0  - count_out_ap_vld (Read/COR)
--        others - reserved
-- (SC = Self Clear, COR = Clear on Read, TOW = Toggle on Write, COH = Clear on Handshake)

architecture behave of memory_scanner_AXILiteS_s_axi is
    constant ADDR_BITS          : INTEGER   := 8;
    constant ADDR_AP_CTRL : INTEGER :=16#00#;
    constant ADDR_GIE : INTEGER :=16#04#;
    constant ADDR_IER : INTEGER :=16#08#;
    constant ADDR_ISR : INTEGER :=16#0c#;
    constant ADDR_AP_RETURN_0 : INTEGER :=16#10#;
    constant ADDR_SEARCH_STRING_0_DATA_0 : INTEGER :=16#18#;
    constant ADDR_SEARCH_STRING_0_CTRL : INTEGER :=16#1c#;
    constant ADDR_SEARCH_STRING_1_DATA_0 : INTEGER :=16#20#;
    constant ADDR_SEARCH_STRING_1_CTRL : INTEGER :=16#24#;
    constant ADDR_SEARCH_STRING_2_DATA_0 : INTEGER :=16#28#;
    constant ADDR_SEARCH_STRING_2_CTRL : INTEGER :=16#2c#;
    constant ADDR_SEARCH_STRING_3_DATA_0 : INTEGER :=16#30#;
    constant ADDR_SEARCH_STRING_3_CTRL : INTEGER :=16#34#;
    constant ADDR_SEARCH_STRING_4_DATA_0 : INTEGER :=16#38#;
    constant ADDR_SEARCH_STRING_4_CTRL : INTEGER :=16#3c#;
    constant ADDR_SEARCH_STRING_5_DATA_0 : INTEGER :=16#40#;
    constant ADDR_SEARCH_STRING_5_CTRL : INTEGER :=16#44#;
    constant ADDR_SEARCH_STRING_6_DATA_0 : INTEGER :=16#48#;
    constant ADDR_SEARCH_STRING_6_CTRL : INTEGER :=16#4c#;
    constant ADDR_SEARCH_STRING_7_DATA_0 : INTEGER :=16#50#;
    constant ADDR_SEARCH_STRING_7_CTRL : INTEGER :=16#54#;
    constant ADDR_SEARCH_STRING_8_DATA_0 : INTEGER :=16#58#;
    constant ADDR_SEARCH_STRING_8_CTRL : INTEGER :=16#5c#;
    constant ADDR_SEARCH_STRING_9_DATA_0 : INTEGER :=16#60#;
    constant ADDR_SEARCH_STRING_9_CTRL : INTEGER :=16#64#;
    constant ADDR_SEARCH_STRING_10_DATA_0 : INTEGER :=16#68#;
    constant ADDR_SEARCH_STRING_10_CTRL : INTEGER :=16#6c#;
    constant ADDR_SEARCH_STRING_11_DATA_0 : INTEGER :=16#70#;
    constant ADDR_SEARCH_STRING_11_CTRL : INTEGER :=16#74#;
    constant ADDR_SEARCH_STRING_12_DATA_0 : INTEGER :=16#78#;
    constant ADDR_SEARCH_STRING_12_CTRL : INTEGER :=16#7c#;
    constant ADDR_SEARCH_STRING_13_DATA_0 : INTEGER :=16#80#;
    constant ADDR_SEARCH_STRING_13_CTRL : INTEGER :=16#84#;
    constant ADDR_SEARCH_STRING_14_DATA_0 : INTEGER :=16#88#;
    constant ADDR_SEARCH_STRING_14_CTRL : INTEGER :=16#8c#;
    constant ADDR_SEARCH_STRING_15_DATA_0 : INTEGER :=16#90#;
    constant ADDR_SEARCH_STRING_15_CTRL : INTEGER :=16#94#;
    constant ADDR_SEARCH_STRING_16_DATA_0 : INTEGER :=16#98#;
    constant ADDR_SEARCH_STRING_16_CTRL : INTEGER :=16#9c#;
    constant ADDR_COUNT_OUT_DATA_0 : INTEGER :=16#a0#;
    constant ADDR_COUNT_OUT_CTRL : INTEGER :=16#a4#;
    type states is (wridle, wrdata, wrresp, rdidle, rddata);  -- read and write FSM states
    signal wstate, wnext, rstate, rnext: states;
    -- Local signal
    signal waddr : UNSIGNED(ADDR_BITS-1 downto 0);
    signal wmask : UNSIGNED(31 downto 0);
    signal aw_hs : STD_LOGIC;
    signal w_hs : STD_LOGIC;
    signal rdata_data : UNSIGNED(31 downto 0);
    signal ar_hs : STD_LOGIC;
    signal raddr : UNSIGNED(ADDR_BITS-1 downto 0);
    signal AWREADY_t : STD_LOGIC;
    signal WREADY_t : STD_LOGIC;
    signal ARREADY_t : STD_LOGIC;
    -- internal registers
    signal int_ap_idle : STD_LOGIC;
    signal int_ap_ready : STD_LOGIC;
    signal int_ap_done : STD_LOGIC;
    signal int_ap_start : STD_LOGIC;
    signal int_auto_restart : STD_LOGIC;
    signal int_gie : STD_LOGIC;
    signal int_ier : UNSIGNED(1 downto 0);
    signal int_isr : UNSIGNED(1 downto 0);
    signal int_ap_return : UNSIGNED(0 downto 0);
    signal int_search_string_0 : UNSIGNED(7 downto 0);
    signal int_search_string_0_ap_vld : STD_LOGIC;
    signal int_search_string_0_ap_ack : STD_LOGIC;
    signal int_search_string_1 : UNSIGNED(7 downto 0);
    signal int_search_string_1_ap_vld : STD_LOGIC;
    signal int_search_string_1_ap_ack : STD_LOGIC;
    signal int_search_string_2 : UNSIGNED(7 downto 0);
    signal int_search_string_2_ap_vld : STD_LOGIC;
    signal int_search_string_2_ap_ack : STD_LOGIC;
    signal int_search_string_3 : UNSIGNED(7 downto 0);
    signal int_search_string_3_ap_vld : STD_LOGIC;
    signal int_search_string_3_ap_ack : STD_LOGIC;
    signal int_search_string_4 : UNSIGNED(7 downto 0);
    signal int_search_string_4_ap_vld : STD_LOGIC;
    signal int_search_string_4_ap_ack : STD_LOGIC;
    signal int_search_string_5 : UNSIGNED(7 downto 0);
    signal int_search_string_5_ap_vld : STD_LOGIC;
    signal int_search_string_5_ap_ack : STD_LOGIC;
    signal int_search_string_6 : UNSIGNED(7 downto 0);
    signal int_search_string_6_ap_vld : STD_LOGIC;
    signal int_search_string_6_ap_ack : STD_LOGIC;
    signal int_search_string_7 : UNSIGNED(7 downto 0);
    signal int_search_string_7_ap_vld : STD_LOGIC;
    signal int_search_string_7_ap_ack : STD_LOGIC;
    signal int_search_string_8 : UNSIGNED(7 downto 0);
    signal int_search_string_8_ap_vld : STD_LOGIC;
    signal int_search_string_8_ap_ack : STD_LOGIC;
    signal int_search_string_9 : UNSIGNED(7 downto 0);
    signal int_search_string_9_ap_vld : STD_LOGIC;
    signal int_search_string_9_ap_ack : STD_LOGIC;
    signal int_search_string_10 : UNSIGNED(7 downto 0);
    signal int_search_string_10_ap_vld : STD_LOGIC;
    signal int_search_string_10_ap_ack : STD_LOGIC;
    signal int_search_string_11 : UNSIGNED(7 downto 0);
    signal int_search_string_11_ap_vld : STD_LOGIC;
    signal int_search_string_11_ap_ack : STD_LOGIC;
    signal int_search_string_12 : UNSIGNED(7 downto 0);
    signal int_search_string_12_ap_vld : STD_LOGIC;
    signal int_search_string_12_ap_ack : STD_LOGIC;
    signal int_search_string_13 : UNSIGNED(7 downto 0);
    signal int_search_string_13_ap_vld : STD_LOGIC;
    signal int_search_string_13_ap_ack : STD_LOGIC;
    signal int_search_string_14 : UNSIGNED(7 downto 0);
    signal int_search_string_14_ap_vld : STD_LOGIC;
    signal int_search_string_14_ap_ack : STD_LOGIC;
    signal int_search_string_15 : UNSIGNED(7 downto 0);
    signal int_search_string_15_ap_vld : STD_LOGIC;
    signal int_search_string_15_ap_ack : STD_LOGIC;
    signal int_search_string_16 : UNSIGNED(7 downto 0);
    signal int_search_string_16_ap_vld : STD_LOGIC;
    signal int_search_string_16_ap_ack : STD_LOGIC;
    signal int_count_out : UNSIGNED(31 downto 0);
    signal int_count_out_ap_vld : STD_LOGIC;

begin
    -- axi write
    AWREADY_t <=  '1' when wstate = wridle else '0';
    AWREADY   <=  AWREADY_t;
    WREADY_t  <=  '1' when wstate = wrdata else '0';
    WREADY    <=  WREADY_t;
    BRESP     <=  "00";  -- OKAY
    BVALID    <=  '1' when wstate = wrresp else '0';
    wmask     <=  (31 downto 24 => WSTRB(3), 23 downto 16 => WSTRB(2), 15 downto 8 => WSTRB(1), 7 downto 0 => WSTRB(0));
    aw_hs     <=  AWVALID and AWREADY_t;
    w_hs      <=  WVALID and WREADY_t;

    -- write FSM
    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESETN = '0') then
                wstate <= wridle;
            else
                wstate <= wnext;
            end if;
        end if;
    end process;

    process (wstate, AWVALID, WVALID, BREADY)
    begin
        case (wstate) is
        when wridle =>
            if (AWVALID = '1') then
                wnext <= wrdata;
            else
                wnext <= wridle;
            end if;
        when wrdata =>
            if (WVALID = '1') then
                wnext <= wrresp;
            else
                wnext <= wrdata;
            end if;
        when wrresp =>
            if (BREADY = '1') then
                wnext <= wridle;
            else
                wnext <= wrresp;
            end if;
        when others =>
            wnext <= wridle;
        end case;
    end process;

    waddr_proc : process (ACLK)
    begin
        if (ACLk'event and ACLK = '1') then
            if (aw_hs = '1') then
                waddr <= UNSIGNED(AWADDR(ADDR_BITS-1 downto 0));
            end if;
        end if;
    end process;

    -- axi read
    ARREADY_t <= '1' when (rstate = rdidle) else '0';
    ARREADY <= ARREADY_t;
    RDATA   <= STD_LOGIC_VECTOR(rdata_data);
    RRESP   <= "00";  -- OKAY
    RVALID  <= '1' when (rstate = rddata) else '0';
    ar_hs   <= ARVALID and ARREADY_t;
    raddr   <= UNSIGNED(ARADDR(ADDR_BITS-1 downto 0));

    -- read FSM
    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESETN = '0') then
                rstate <= rdidle;
            else
                rstate <= rnext;
            end if;
        end if;
    end process;

    process (rstate, ARVALID, RREADY)
    begin
        case (rstate) is
        when rdidle =>
            if (ARVALID = '1') then
                rnext <= rddata;
            else
                rnext <= rdidle;
            end if;
        when rddata =>
            if (RREADY = '1') then
                rnext <= rdidle;
            else
                rnext <= rddata;
            end if;
        when others =>
            rnext <= rdidle;
        end case;
    end process;

    rdata_proc : process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ar_hs = '1') then
                case (TO_INTEGER(raddr)) is
                when ADDR_AP_CTRL =>
                    rdata_data <= (7 => int_auto_restart, 3 => int_ap_ready, 2 => int_ap_idle, 1 => int_ap_done, 0 => int_ap_start, others => '0');
                when ADDR_GIE =>
                    rdata_data <= (1 => int_gie, others => '0');
                when ADDR_IER =>
                    rdata_data <= (2 => int_ier(1), 1 => int_ier(0), others => '0');
                when ADDR_ISR =>
                    rdata_data <= (2 => int_isr(1), 1 => int_isr(0), others => '0');
                when ADDR_AP_RETURN_0 =>
                    rdata_data <= RESIZE(int_ap_return(0 downto 0), 32);
                when ADDR_SEARCH_STRING_0_DATA_0 =>
                    rdata_data <= RESIZE(int_search_string_0(7 downto 0), 32);
                when ADDR_SEARCH_STRING_0_CTRL =>
                    rdata_data <= (1 => (not int_search_string_0_ap_vld), 0 => int_search_string_0_ap_vld, others => '0');
                when ADDR_SEARCH_STRING_1_DATA_0 =>
                    rdata_data <= RESIZE(int_search_string_1(7 downto 0), 32);
                when ADDR_SEARCH_STRING_1_CTRL =>
                    rdata_data <= (1 => (not int_search_string_1_ap_vld), 0 => int_search_string_1_ap_vld, others => '0');
                when ADDR_SEARCH_STRING_2_DATA_0 =>
                    rdata_data <= RESIZE(int_search_string_2(7 downto 0), 32);
                when ADDR_SEARCH_STRING_2_CTRL =>
                    rdata_data <= (1 => (not int_search_string_2_ap_vld), 0 => int_search_string_2_ap_vld, others => '0');
                when ADDR_SEARCH_STRING_3_DATA_0 =>
                    rdata_data <= RESIZE(int_search_string_3(7 downto 0), 32);
                when ADDR_SEARCH_STRING_3_CTRL =>
                    rdata_data <= (1 => (not int_search_string_3_ap_vld), 0 => int_search_string_3_ap_vld, others => '0');
                when ADDR_SEARCH_STRING_4_DATA_0 =>
                    rdata_data <= RESIZE(int_search_string_4(7 downto 0), 32);
                when ADDR_SEARCH_STRING_4_CTRL =>
                    rdata_data <= (1 => (not int_search_string_4_ap_vld), 0 => int_search_string_4_ap_vld, others => '0');
                when ADDR_SEARCH_STRING_5_DATA_0 =>
                    rdata_data <= RESIZE(int_search_string_5(7 downto 0), 32);
                when ADDR_SEARCH_STRING_5_CTRL =>
                    rdata_data <= (1 => (not int_search_string_5_ap_vld), 0 => int_search_string_5_ap_vld, others => '0');
                when ADDR_SEARCH_STRING_6_DATA_0 =>
                    rdata_data <= RESIZE(int_search_string_6(7 downto 0), 32);
                when ADDR_SEARCH_STRING_6_CTRL =>
                    rdata_data <= (1 => (not int_search_string_6_ap_vld), 0 => int_search_string_6_ap_vld, others => '0');
                when ADDR_SEARCH_STRING_7_DATA_0 =>
                    rdata_data <= RESIZE(int_search_string_7(7 downto 0), 32);
                when ADDR_SEARCH_STRING_7_CTRL =>
                    rdata_data <= (1 => (not int_search_string_7_ap_vld), 0 => int_search_string_7_ap_vld, others => '0');
                when ADDR_SEARCH_STRING_8_DATA_0 =>
                    rdata_data <= RESIZE(int_search_string_8(7 downto 0), 32);
                when ADDR_SEARCH_STRING_8_CTRL =>
                    rdata_data <= (1 => (not int_search_string_8_ap_vld), 0 => int_search_string_8_ap_vld, others => '0');
                when ADDR_SEARCH_STRING_9_DATA_0 =>
                    rdata_data <= RESIZE(int_search_string_9(7 downto 0), 32);
                when ADDR_SEARCH_STRING_9_CTRL =>
                    rdata_data <= (1 => (not int_search_string_9_ap_vld), 0 => int_search_string_9_ap_vld, others => '0');
                when ADDR_SEARCH_STRING_10_DATA_0 =>
                    rdata_data <= RESIZE(int_search_string_10(7 downto 0), 32);
                when ADDR_SEARCH_STRING_10_CTRL =>
                    rdata_data <= (1 => (not int_search_string_10_ap_vld), 0 => int_search_string_10_ap_vld, others => '0');
                when ADDR_SEARCH_STRING_11_DATA_0 =>
                    rdata_data <= RESIZE(int_search_string_11(7 downto 0), 32);
                when ADDR_SEARCH_STRING_11_CTRL =>
                    rdata_data <= (1 => (not int_search_string_11_ap_vld), 0 => int_search_string_11_ap_vld, others => '0');
                when ADDR_SEARCH_STRING_12_DATA_0 =>
                    rdata_data <= RESIZE(int_search_string_12(7 downto 0), 32);
                when ADDR_SEARCH_STRING_12_CTRL =>
                    rdata_data <= (1 => (not int_search_string_12_ap_vld), 0 => int_search_string_12_ap_vld, others => '0');
                when ADDR_SEARCH_STRING_13_DATA_0 =>
                    rdata_data <= RESIZE(int_search_string_13(7 downto 0), 32);
                when ADDR_SEARCH_STRING_13_CTRL =>
                    rdata_data <= (1 => (not int_search_string_13_ap_vld), 0 => int_search_string_13_ap_vld, others => '0');
                when ADDR_SEARCH_STRING_14_DATA_0 =>
                    rdata_data <= RESIZE(int_search_string_14(7 downto 0), 32);
                when ADDR_SEARCH_STRING_14_CTRL =>
                    rdata_data <= (1 => (not int_search_string_14_ap_vld), 0 => int_search_string_14_ap_vld, others => '0');
                when ADDR_SEARCH_STRING_15_DATA_0 =>
                    rdata_data <= RESIZE(int_search_string_15(7 downto 0), 32);
                when ADDR_SEARCH_STRING_15_CTRL =>
                    rdata_data <= (1 => (not int_search_string_15_ap_vld), 0 => int_search_string_15_ap_vld, others => '0');
                when ADDR_SEARCH_STRING_16_DATA_0 =>
                    rdata_data <= RESIZE(int_search_string_16(7 downto 0), 32);
                when ADDR_SEARCH_STRING_16_CTRL =>
                    rdata_data <= (1 => (not int_search_string_16_ap_vld), 0 => int_search_string_16_ap_vld, others => '0');
                when ADDR_COUNT_OUT_DATA_0 =>
                    rdata_data <= RESIZE(int_count_out(31 downto 0), 32);
                when ADDR_COUNT_OUT_CTRL =>
                    rdata_data <= (0 => int_count_out_ap_vld, others => '0');
                when others =>
                    rdata_data <= (others => '0');
                end case;
            end if;
        end if;
    end process;

    -- internal registers
    interrupt <= int_gie and (int_isr(0) or int_isr(1));
    ap_start <= int_ap_start;
    int_ap_idle <= ap_idle;
    int_ap_ready <= ap_ready;
    int_ap_return <= UNSIGNED(ap_return);
    search_string_0 <= STD_LOGIC_VECTOR(int_search_string_0);
    search_string_0_ap_vld <= int_search_string_0_ap_vld;
    int_search_string_0_ap_ack <= search_string_0_ap_ack;
    search_string_1 <= STD_LOGIC_VECTOR(int_search_string_1);
    search_string_1_ap_vld <= int_search_string_1_ap_vld;
    int_search_string_1_ap_ack <= search_string_1_ap_ack;
    search_string_2 <= STD_LOGIC_VECTOR(int_search_string_2);
    search_string_2_ap_vld <= int_search_string_2_ap_vld;
    int_search_string_2_ap_ack <= search_string_2_ap_ack;
    search_string_3 <= STD_LOGIC_VECTOR(int_search_string_3);
    search_string_3_ap_vld <= int_search_string_3_ap_vld;
    int_search_string_3_ap_ack <= search_string_3_ap_ack;
    search_string_4 <= STD_LOGIC_VECTOR(int_search_string_4);
    search_string_4_ap_vld <= int_search_string_4_ap_vld;
    int_search_string_4_ap_ack <= search_string_4_ap_ack;
    search_string_5 <= STD_LOGIC_VECTOR(int_search_string_5);
    search_string_5_ap_vld <= int_search_string_5_ap_vld;
    int_search_string_5_ap_ack <= search_string_5_ap_ack;
    search_string_6 <= STD_LOGIC_VECTOR(int_search_string_6);
    search_string_6_ap_vld <= int_search_string_6_ap_vld;
    int_search_string_6_ap_ack <= search_string_6_ap_ack;
    search_string_7 <= STD_LOGIC_VECTOR(int_search_string_7);
    search_string_7_ap_vld <= int_search_string_7_ap_vld;
    int_search_string_7_ap_ack <= search_string_7_ap_ack;
    search_string_8 <= STD_LOGIC_VECTOR(int_search_string_8);
    search_string_8_ap_vld <= int_search_string_8_ap_vld;
    int_search_string_8_ap_ack <= search_string_8_ap_ack;
    search_string_9 <= STD_LOGIC_VECTOR(int_search_string_9);
    search_string_9_ap_vld <= int_search_string_9_ap_vld;
    int_search_string_9_ap_ack <= search_string_9_ap_ack;
    search_string_10 <= STD_LOGIC_VECTOR(int_search_string_10);
    search_string_10_ap_vld <= int_search_string_10_ap_vld;
    int_search_string_10_ap_ack <= search_string_10_ap_ack;
    search_string_11 <= STD_LOGIC_VECTOR(int_search_string_11);
    search_string_11_ap_vld <= int_search_string_11_ap_vld;
    int_search_string_11_ap_ack <= search_string_11_ap_ack;
    search_string_12 <= STD_LOGIC_VECTOR(int_search_string_12);
    search_string_12_ap_vld <= int_search_string_12_ap_vld;
    int_search_string_12_ap_ack <= search_string_12_ap_ack;
    search_string_13 <= STD_LOGIC_VECTOR(int_search_string_13);
    search_string_13_ap_vld <= int_search_string_13_ap_vld;
    int_search_string_13_ap_ack <= search_string_13_ap_ack;
    search_string_14 <= STD_LOGIC_VECTOR(int_search_string_14);
    search_string_14_ap_vld <= int_search_string_14_ap_vld;
    int_search_string_14_ap_ack <= search_string_14_ap_ack;
    search_string_15 <= STD_LOGIC_VECTOR(int_search_string_15);
    search_string_15_ap_vld <= int_search_string_15_ap_vld;
    int_search_string_15_ap_ack <= search_string_15_ap_ack;
    search_string_16 <= STD_LOGIC_VECTOR(int_search_string_16);
    search_string_16_ap_vld <= int_search_string_16_ap_vld;
    int_search_string_16_ap_ack <= search_string_16_ap_ack;
    int_count_out <= UNSIGNED(count_out);

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
             if (ARESETN = '0') then
                 int_ap_start <= '0';
             elsif (w_hs = '1' and waddr = ADDR_AP_CTRL and WSTRB(0) = '1' and WDATA(0) = '1') then
                 int_ap_start <= '1';
             elsif (int_ap_ready = '1') then
                 int_ap_start <= int_auto_restart; -- clear on handshake/auto restart
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
             if (ARESETN = '0') then
                 int_ap_done <= '0';
             elsif (ap_done = '1') then
                 int_ap_done <= '1';
             elsif (ar_hs = '1' and raddr = ADDR_AP_CTRL) then
                 int_ap_done <= '0'; -- clear on read
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
             if (ARESETN = '0') then
                 int_auto_restart <= '0';
             elsif (w_hs = '1' and waddr = ADDR_AP_CTRL and WSTRB(0) = '1') then
                 int_auto_restart <= WDATA(7);
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
             if (ARESETN = '0') then
                 int_gie <= '0';
             elsif (w_hs = '1' and waddr = ADDR_GIE and WSTRB(0) = '1') then
                 int_gie <= WDATA(0);
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
             if (ARESETN = '0') then
                 int_ier <= "00";
             elsif (w_hs = '1' and waddr = ADDR_IER and WSTRB(0) = '1') then
                 int_ier <= UNSIGNED(WDATA(1 downto 0));
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
             if (ARESETN = '0') then
                 int_isr(0) <= '0';
             elsif (int_ier(0) = '1' and ap_done = '1') then
                 int_isr(0) <= '1';
             elsif (w_hs = '1' and waddr = ADDR_ISR and WSTRB(0) = '1') then
                 int_isr(0) <= int_isr(0) xor WDATA(0); -- toggle on write
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
             if (ARESETN = '0') then
                 int_isr(1) <= '0';
             elsif (int_ier(1) = '1' and ap_ready = '1') then
                 int_isr(1) <= '1';
             elsif (w_hs = '1' and waddr = ADDR_ISR and WSTRB(0) = '1') then
                 int_isr(1) <= int_isr(1) xor WDATA(1); -- toggle on write
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
             if (w_hs = '1' and waddr = ADDR_SEARCH_STRING_0_DATA_0) then
                 int_search_string_0(7 downto 0) <= (UNSIGNED(WDATA(7 downto 0)) and wmask(7 downto 0)) or ((not wmask(7 downto 0)) and int_search_string_0(7 downto 0));
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
             if (ARESETN = '0') then
                 int_search_string_0_ap_vld <= '0';
             elsif (w_hs = '1' and waddr = ADDR_SEARCH_STRING_0_CTRL and WSTRB(0) = '1' and WDATA(0) = '1') then
                 int_search_string_0_ap_vld <= '1';
             elsif (search_string_0_ap_ack = '1') then
                 int_search_string_0_ap_vld <= '0'; -- clear on handshake
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
             if (w_hs = '1' and waddr = ADDR_SEARCH_STRING_1_DATA_0) then
                 int_search_string_1(7 downto 0) <= (UNSIGNED(WDATA(7 downto 0)) and wmask(7 downto 0)) or ((not wmask(7 downto 0)) and int_search_string_1(7 downto 0));
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
             if (ARESETN = '0') then
                 int_search_string_1_ap_vld <= '0';
             elsif (w_hs = '1' and waddr = ADDR_SEARCH_STRING_1_CTRL and WSTRB(0) = '1' and WDATA(0) = '1') then
                 int_search_string_1_ap_vld <= '1';
             elsif (search_string_1_ap_ack = '1') then
                 int_search_string_1_ap_vld <= '0'; -- clear on handshake
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
             if (w_hs = '1' and waddr = ADDR_SEARCH_STRING_2_DATA_0) then
                 int_search_string_2(7 downto 0) <= (UNSIGNED(WDATA(7 downto 0)) and wmask(7 downto 0)) or ((not wmask(7 downto 0)) and int_search_string_2(7 downto 0));
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
             if (ARESETN = '0') then
                 int_search_string_2_ap_vld <= '0';
             elsif (w_hs = '1' and waddr = ADDR_SEARCH_STRING_2_CTRL and WSTRB(0) = '1' and WDATA(0) = '1') then
                 int_search_string_2_ap_vld <= '1';
             elsif (search_string_2_ap_ack = '1') then
                 int_search_string_2_ap_vld <= '0'; -- clear on handshake
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
             if (w_hs = '1' and waddr = ADDR_SEARCH_STRING_3_DATA_0) then
                 int_search_string_3(7 downto 0) <= (UNSIGNED(WDATA(7 downto 0)) and wmask(7 downto 0)) or ((not wmask(7 downto 0)) and int_search_string_3(7 downto 0));
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
             if (ARESETN = '0') then
                 int_search_string_3_ap_vld <= '0';
             elsif (w_hs = '1' and waddr = ADDR_SEARCH_STRING_3_CTRL and WSTRB(0) = '1' and WDATA(0) = '1') then
                 int_search_string_3_ap_vld <= '1';
             elsif (search_string_3_ap_ack = '1') then
                 int_search_string_3_ap_vld <= '0'; -- clear on handshake
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
             if (w_hs = '1' and waddr = ADDR_SEARCH_STRING_4_DATA_0) then
                 int_search_string_4(7 downto 0) <= (UNSIGNED(WDATA(7 downto 0)) and wmask(7 downto 0)) or ((not wmask(7 downto 0)) and int_search_string_4(7 downto 0));
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
             if (ARESETN = '0') then
                 int_search_string_4_ap_vld <= '0';
             elsif (w_hs = '1' and waddr = ADDR_SEARCH_STRING_4_CTRL and WSTRB(0) = '1' and WDATA(0) = '1') then
                 int_search_string_4_ap_vld <= '1';
             elsif (search_string_4_ap_ack = '1') then
                 int_search_string_4_ap_vld <= '0'; -- clear on handshake
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
             if (w_hs = '1' and waddr = ADDR_SEARCH_STRING_5_DATA_0) then
                 int_search_string_5(7 downto 0) <= (UNSIGNED(WDATA(7 downto 0)) and wmask(7 downto 0)) or ((not wmask(7 downto 0)) and int_search_string_5(7 downto 0));
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
             if (ARESETN = '0') then
                 int_search_string_5_ap_vld <= '0';
             elsif (w_hs = '1' and waddr = ADDR_SEARCH_STRING_5_CTRL and WSTRB(0) = '1' and WDATA(0) = '1') then
                 int_search_string_5_ap_vld <= '1';
             elsif (search_string_5_ap_ack = '1') then
                 int_search_string_5_ap_vld <= '0'; -- clear on handshake
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
             if (w_hs = '1' and waddr = ADDR_SEARCH_STRING_6_DATA_0) then
                 int_search_string_6(7 downto 0) <= (UNSIGNED(WDATA(7 downto 0)) and wmask(7 downto 0)) or ((not wmask(7 downto 0)) and int_search_string_6(7 downto 0));
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
             if (ARESETN = '0') then
                 int_search_string_6_ap_vld <= '0';
             elsif (w_hs = '1' and waddr = ADDR_SEARCH_STRING_6_CTRL and WSTRB(0) = '1' and WDATA(0) = '1') then
                 int_search_string_6_ap_vld <= '1';
             elsif (search_string_6_ap_ack = '1') then
                 int_search_string_6_ap_vld <= '0'; -- clear on handshake
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
             if (w_hs = '1' and waddr = ADDR_SEARCH_STRING_7_DATA_0) then
                 int_search_string_7(7 downto 0) <= (UNSIGNED(WDATA(7 downto 0)) and wmask(7 downto 0)) or ((not wmask(7 downto 0)) and int_search_string_7(7 downto 0));
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
             if (ARESETN = '0') then
                 int_search_string_7_ap_vld <= '0';
             elsif (w_hs = '1' and waddr = ADDR_SEARCH_STRING_7_CTRL and WSTRB(0) = '1' and WDATA(0) = '1') then
                 int_search_string_7_ap_vld <= '1';
             elsif (search_string_7_ap_ack = '1') then
                 int_search_string_7_ap_vld <= '0'; -- clear on handshake
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
             if (w_hs = '1' and waddr = ADDR_SEARCH_STRING_8_DATA_0) then
                 int_search_string_8(7 downto 0) <= (UNSIGNED(WDATA(7 downto 0)) and wmask(7 downto 0)) or ((not wmask(7 downto 0)) and int_search_string_8(7 downto 0));
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
             if (ARESETN = '0') then
                 int_search_string_8_ap_vld <= '0';
             elsif (w_hs = '1' and waddr = ADDR_SEARCH_STRING_8_CTRL and WSTRB(0) = '1' and WDATA(0) = '1') then
                 int_search_string_8_ap_vld <= '1';
             elsif (search_string_8_ap_ack = '1') then
                 int_search_string_8_ap_vld <= '0'; -- clear on handshake
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
             if (w_hs = '1' and waddr = ADDR_SEARCH_STRING_9_DATA_0) then
                 int_search_string_9(7 downto 0) <= (UNSIGNED(WDATA(7 downto 0)) and wmask(7 downto 0)) or ((not wmask(7 downto 0)) and int_search_string_9(7 downto 0));
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
             if (ARESETN = '0') then
                 int_search_string_9_ap_vld <= '0';
             elsif (w_hs = '1' and waddr = ADDR_SEARCH_STRING_9_CTRL and WSTRB(0) = '1' and WDATA(0) = '1') then
                 int_search_string_9_ap_vld <= '1';
             elsif (search_string_9_ap_ack = '1') then
                 int_search_string_9_ap_vld <= '0'; -- clear on handshake
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
             if (w_hs = '1' and waddr = ADDR_SEARCH_STRING_10_DATA_0) then
                 int_search_string_10(7 downto 0) <= (UNSIGNED(WDATA(7 downto 0)) and wmask(7 downto 0)) or ((not wmask(7 downto 0)) and int_search_string_10(7 downto 0));
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
             if (ARESETN = '0') then
                 int_search_string_10_ap_vld <= '0';
             elsif (w_hs = '1' and waddr = ADDR_SEARCH_STRING_10_CTRL and WSTRB(0) = '1' and WDATA(0) = '1') then
                 int_search_string_10_ap_vld <= '1';
             elsif (search_string_10_ap_ack = '1') then
                 int_search_string_10_ap_vld <= '0'; -- clear on handshake
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
             if (w_hs = '1' and waddr = ADDR_SEARCH_STRING_11_DATA_0) then
                 int_search_string_11(7 downto 0) <= (UNSIGNED(WDATA(7 downto 0)) and wmask(7 downto 0)) or ((not wmask(7 downto 0)) and int_search_string_11(7 downto 0));
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
             if (ARESETN = '0') then
                 int_search_string_11_ap_vld <= '0';
             elsif (w_hs = '1' and waddr = ADDR_SEARCH_STRING_11_CTRL and WSTRB(0) = '1' and WDATA(0) = '1') then
                 int_search_string_11_ap_vld <= '1';
             elsif (search_string_11_ap_ack = '1') then
                 int_search_string_11_ap_vld <= '0'; -- clear on handshake
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
             if (w_hs = '1' and waddr = ADDR_SEARCH_STRING_12_DATA_0) then
                 int_search_string_12(7 downto 0) <= (UNSIGNED(WDATA(7 downto 0)) and wmask(7 downto 0)) or ((not wmask(7 downto 0)) and int_search_string_12(7 downto 0));
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
             if (ARESETN = '0') then
                 int_search_string_12_ap_vld <= '0';
             elsif (w_hs = '1' and waddr = ADDR_SEARCH_STRING_12_CTRL and WSTRB(0) = '1' and WDATA(0) = '1') then
                 int_search_string_12_ap_vld <= '1';
             elsif (search_string_12_ap_ack = '1') then
                 int_search_string_12_ap_vld <= '0'; -- clear on handshake
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
             if (w_hs = '1' and waddr = ADDR_SEARCH_STRING_13_DATA_0) then
                 int_search_string_13(7 downto 0) <= (UNSIGNED(WDATA(7 downto 0)) and wmask(7 downto 0)) or ((not wmask(7 downto 0)) and int_search_string_13(7 downto 0));
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
             if (ARESETN = '0') then
                 int_search_string_13_ap_vld <= '0';
             elsif (w_hs = '1' and waddr = ADDR_SEARCH_STRING_13_CTRL and WSTRB(0) = '1' and WDATA(0) = '1') then
                 int_search_string_13_ap_vld <= '1';
             elsif (search_string_13_ap_ack = '1') then
                 int_search_string_13_ap_vld <= '0'; -- clear on handshake
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
             if (w_hs = '1' and waddr = ADDR_SEARCH_STRING_14_DATA_0) then
                 int_search_string_14(7 downto 0) <= (UNSIGNED(WDATA(7 downto 0)) and wmask(7 downto 0)) or ((not wmask(7 downto 0)) and int_search_string_14(7 downto 0));
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
             if (ARESETN = '0') then
                 int_search_string_14_ap_vld <= '0';
             elsif (w_hs = '1' and waddr = ADDR_SEARCH_STRING_14_CTRL and WSTRB(0) = '1' and WDATA(0) = '1') then
                 int_search_string_14_ap_vld <= '1';
             elsif (search_string_14_ap_ack = '1') then
                 int_search_string_14_ap_vld <= '0'; -- clear on handshake
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
             if (w_hs = '1' and waddr = ADDR_SEARCH_STRING_15_DATA_0) then
                 int_search_string_15(7 downto 0) <= (UNSIGNED(WDATA(7 downto 0)) and wmask(7 downto 0)) or ((not wmask(7 downto 0)) and int_search_string_15(7 downto 0));
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
             if (ARESETN = '0') then
                 int_search_string_15_ap_vld <= '0';
             elsif (w_hs = '1' and waddr = ADDR_SEARCH_STRING_15_CTRL and WSTRB(0) = '1' and WDATA(0) = '1') then
                 int_search_string_15_ap_vld <= '1';
             elsif (search_string_15_ap_ack = '1') then
                 int_search_string_15_ap_vld <= '0'; -- clear on handshake
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
             if (w_hs = '1' and waddr = ADDR_SEARCH_STRING_16_DATA_0) then
                 int_search_string_16(7 downto 0) <= (UNSIGNED(WDATA(7 downto 0)) and wmask(7 downto 0)) or ((not wmask(7 downto 0)) and int_search_string_16(7 downto 0));
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
             if (ARESETN = '0') then
                 int_search_string_16_ap_vld <= '0';
             elsif (w_hs = '1' and waddr = ADDR_SEARCH_STRING_16_CTRL and WSTRB(0) = '1' and WDATA(0) = '1') then
                 int_search_string_16_ap_vld <= '1';
             elsif (search_string_16_ap_ack = '1') then
                 int_search_string_16_ap_vld <= '0'; -- clear on handshake
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
             if (ARESETN = '0') then
                 int_count_out_ap_vld <= '0';
             elsif (count_out_ap_vld = '1') then
                 int_count_out_ap_vld <= '1';
             elsif (ar_hs = '1' and raddr = ADDR_COUNT_OUT_CTRL) then
                 int_count_out_ap_vld <= '0'; -- clear on read
            end if;
        end if;
    end process;

end architecture behave;
